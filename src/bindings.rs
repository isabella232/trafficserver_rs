/* automatically generated by rust-bindgen */

pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __time_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type off_t = __off_t;
pub type time_t = __time_t;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSPluginRegistrationInfo {
    pub plugin_name: *const ::std::os::raw::c_char,
    pub vendor_name: *const ::std::os::raw::c_char,
    pub support_email: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TSPluginRegistrationInfo() {
    assert_eq!(
        ::std::mem::size_of::<TSPluginRegistrationInfo>(),
        24usize,
        concat!("Size of: ", stringify!(TSPluginRegistrationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<TSPluginRegistrationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(TSPluginRegistrationInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSPluginRegistrationInfo>())).plugin_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSPluginRegistrationInfo),
            "::",
            stringify!(plugin_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSPluginRegistrationInfo>())).vendor_name as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSPluginRegistrationInfo),
            "::",
            stringify!(vendor_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TSPluginRegistrationInfo>())).support_email as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSPluginRegistrationInfo),
            "::",
            stringify!(support_email)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSPluginMsg {
    pub tag: *const ::std::os::raw::c_char,
    pub data: *const ::std::os::raw::c_void,
    pub data_size: usize,
}
#[test]
fn bindgen_test_layout_TSPluginMsg() {
    assert_eq!(
        ::std::mem::size_of::<TSPluginMsg>(),
        24usize,
        concat!("Size of: ", stringify!(TSPluginMsg))
    );
    assert_eq!(
        ::std::mem::align_of::<TSPluginMsg>(),
        8usize,
        concat!("Alignment of ", stringify!(TSPluginMsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSPluginMsg>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSPluginMsg),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSPluginMsg>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSPluginMsg),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSPluginMsg>())).data_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSPluginMsg),
            "::",
            stringify!(data_size)
        )
    );
}
pub const TSParseResult_TS_PARSE_ERROR: TSParseResult = -1;
pub const TSParseResult_TS_PARSE_DONE: TSParseResult = 0;
pub const TSParseResult_TS_PARSE_CONT: TSParseResult = 1;
pub type TSParseResult = i32;
pub const TSHttpType_TS_HTTP_TYPE_UNKNOWN: TSHttpType = 0;
pub const TSHttpType_TS_HTTP_TYPE_REQUEST: TSHttpType = 1;
pub const TSHttpType_TS_HTTP_TYPE_RESPONSE: TSHttpType = 2;
pub type TSHttpType = u32;
pub const TSHttpStatus_TS_HTTP_STATUS_NONE: TSHttpStatus = 0;
pub const TSHttpStatus_TS_HTTP_STATUS_CONTINUE: TSHttpStatus = 100;
pub const TSHttpStatus_TS_HTTP_STATUS_SWITCHING_PROTOCOL: TSHttpStatus = 101;
pub const TSHttpStatus_TS_HTTP_STATUS_EARLY_HINTS: TSHttpStatus = 103;
pub const TSHttpStatus_TS_HTTP_STATUS_OK: TSHttpStatus = 200;
pub const TSHttpStatus_TS_HTTP_STATUS_CREATED: TSHttpStatus = 201;
pub const TSHttpStatus_TS_HTTP_STATUS_ACCEPTED: TSHttpStatus = 202;
pub const TSHttpStatus_TS_HTTP_STATUS_NON_AUTHORITATIVE_INFORMATION: TSHttpStatus = 203;
pub const TSHttpStatus_TS_HTTP_STATUS_NO_CONTENT: TSHttpStatus = 204;
pub const TSHttpStatus_TS_HTTP_STATUS_RESET_CONTENT: TSHttpStatus = 205;
pub const TSHttpStatus_TS_HTTP_STATUS_PARTIAL_CONTENT: TSHttpStatus = 206;
pub const TSHttpStatus_TS_HTTP_STATUS_MULTI_STATUS: TSHttpStatus = 207;
pub const TSHttpStatus_TS_HTTP_STATUS_ALREADY_REPORTED: TSHttpStatus = 208;
pub const TSHttpStatus_TS_HTTP_STATUS_IM_USED: TSHttpStatus = 211;
pub const TSHttpStatus_TS_HTTP_STATUS_MULTIPLE_CHOICES: TSHttpStatus = 300;
pub const TSHttpStatus_TS_HTTP_STATUS_MOVED_PERMANENTLY: TSHttpStatus = 301;
pub const TSHttpStatus_TS_HTTP_STATUS_MOVED_TEMPORARILY: TSHttpStatus = 302;
pub const TSHttpStatus_TS_HTTP_STATUS_SEE_OTHER: TSHttpStatus = 303;
pub const TSHttpStatus_TS_HTTP_STATUS_NOT_MODIFIED: TSHttpStatus = 304;
pub const TSHttpStatus_TS_HTTP_STATUS_USE_PROXY: TSHttpStatus = 305;
pub const TSHttpStatus_TS_HTTP_STATUS_TEMPORARY_REDIRECT: TSHttpStatus = 307;
pub const TSHttpStatus_TS_HTTP_STATUS_PERMANENT_REDIRECT: TSHttpStatus = 308;
pub const TSHttpStatus_TS_HTTP_STATUS_BAD_REQUEST: TSHttpStatus = 400;
pub const TSHttpStatus_TS_HTTP_STATUS_UNAUTHORIZED: TSHttpStatus = 401;
pub const TSHttpStatus_TS_HTTP_STATUS_PAYMENT_REQUIRED: TSHttpStatus = 402;
pub const TSHttpStatus_TS_HTTP_STATUS_FORBIDDEN: TSHttpStatus = 403;
pub const TSHttpStatus_TS_HTTP_STATUS_NOT_FOUND: TSHttpStatus = 404;
pub const TSHttpStatus_TS_HTTP_STATUS_METHOD_NOT_ALLOWED: TSHttpStatus = 405;
pub const TSHttpStatus_TS_HTTP_STATUS_NOT_ACCEPTABLE: TSHttpStatus = 406;
pub const TSHttpStatus_TS_HTTP_STATUS_PROXY_AUTHENTICATION_REQUIRED: TSHttpStatus = 407;
pub const TSHttpStatus_TS_HTTP_STATUS_REQUEST_TIMEOUT: TSHttpStatus = 408;
pub const TSHttpStatus_TS_HTTP_STATUS_CONFLICT: TSHttpStatus = 409;
pub const TSHttpStatus_TS_HTTP_STATUS_GONE: TSHttpStatus = 410;
pub const TSHttpStatus_TS_HTTP_STATUS_LENGTH_REQUIRED: TSHttpStatus = 411;
pub const TSHttpStatus_TS_HTTP_STATUS_PRECONDITION_FAILED: TSHttpStatus = 412;
pub const TSHttpStatus_TS_HTTP_STATUS_REQUEST_ENTITY_TOO_LARGE: TSHttpStatus = 413;
pub const TSHttpStatus_TS_HTTP_STATUS_REQUEST_URI_TOO_LONG: TSHttpStatus = 414;
pub const TSHttpStatus_TS_HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE: TSHttpStatus = 415;
pub const TSHttpStatus_TS_HTTP_STATUS_REQUESTED_RANGE_NOT_SATISFIABLE: TSHttpStatus = 416;
pub const TSHttpStatus_TS_HTTP_STATUS_EXPECTATION_FAILED: TSHttpStatus = 417;
pub const TSHttpStatus_TS_HTTP_STATUS_UNPROCESSABLE_ENTITY: TSHttpStatus = 422;
pub const TSHttpStatus_TS_HTTP_STATUS_LOCKED: TSHttpStatus = 423;
pub const TSHttpStatus_TS_HTTP_STATUS_FAILED_DEPENDENCY: TSHttpStatus = 424;
pub const TSHttpStatus_TS_HTTP_STATUS_UPGRADE_REQUIRED: TSHttpStatus = 426;
pub const TSHttpStatus_TS_HTTP_STATUS_PRECONDITION_REQUIRED: TSHttpStatus = 428;
pub const TSHttpStatus_TS_HTTP_STATUS_TOO_MANY_REQUESTS: TSHttpStatus = 429;
pub const TSHttpStatus_TS_HTTP_STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE: TSHttpStatus = 431;
pub const TSHttpStatus_TS_HTTP_STATUS_INTERNAL_SERVER_ERROR: TSHttpStatus = 500;
pub const TSHttpStatus_TS_HTTP_STATUS_NOT_IMPLEMENTED: TSHttpStatus = 501;
pub const TSHttpStatus_TS_HTTP_STATUS_BAD_GATEWAY: TSHttpStatus = 502;
pub const TSHttpStatus_TS_HTTP_STATUS_SERVICE_UNAVAILABLE: TSHttpStatus = 503;
pub const TSHttpStatus_TS_HTTP_STATUS_GATEWAY_TIMEOUT: TSHttpStatus = 504;
pub const TSHttpStatus_TS_HTTP_STATUS_HTTPVER_NOT_SUPPORTED: TSHttpStatus = 505;
pub const TSHttpStatus_TS_HTTP_STATUS_VARIANT_ALSO_NEGOTIATES: TSHttpStatus = 506;
pub const TSHttpStatus_TS_HTTP_STATUS_INSUFFICIENT_STORAGE: TSHttpStatus = 507;
pub const TSHttpStatus_TS_HTTP_STATUS_LOOP_DETECTED: TSHttpStatus = 508;
pub const TSHttpStatus_TS_HTTP_STATUS_NOT_EXTENDED: TSHttpStatus = 510;
pub const TSHttpStatus_TS_HTTP_STATUS_NETWORK_AUTHENTICATION_REQUIRED: TSHttpStatus = 511;
pub type TSHttpStatus = u32;
pub const TSHttpHookID_TS_HTTP_READ_REQUEST_HDR_HOOK: TSHttpHookID = 0;
pub const TSHttpHookID_TS_HTTP_OS_DNS_HOOK: TSHttpHookID = 1;
pub const TSHttpHookID_TS_HTTP_SEND_REQUEST_HDR_HOOK: TSHttpHookID = 2;
pub const TSHttpHookID_TS_HTTP_READ_CACHE_HDR_HOOK: TSHttpHookID = 3;
pub const TSHttpHookID_TS_HTTP_READ_RESPONSE_HDR_HOOK: TSHttpHookID = 4;
pub const TSHttpHookID_TS_HTTP_SEND_RESPONSE_HDR_HOOK: TSHttpHookID = 5;
pub const TSHttpHookID_TS_HTTP_REQUEST_TRANSFORM_HOOK: TSHttpHookID = 6;
pub const TSHttpHookID_TS_HTTP_RESPONSE_TRANSFORM_HOOK: TSHttpHookID = 7;
pub const TSHttpHookID_TS_HTTP_SELECT_ALT_HOOK: TSHttpHookID = 8;
pub const TSHttpHookID_TS_HTTP_TXN_START_HOOK: TSHttpHookID = 9;
pub const TSHttpHookID_TS_HTTP_TXN_CLOSE_HOOK: TSHttpHookID = 10;
pub const TSHttpHookID_TS_HTTP_SSN_START_HOOK: TSHttpHookID = 11;
pub const TSHttpHookID_TS_HTTP_SSN_CLOSE_HOOK: TSHttpHookID = 12;
pub const TSHttpHookID_TS_HTTP_CACHE_LOOKUP_COMPLETE_HOOK: TSHttpHookID = 13;
pub const TSHttpHookID_TS_HTTP_PRE_REMAP_HOOK: TSHttpHookID = 14;
pub const TSHttpHookID_TS_HTTP_POST_REMAP_HOOK: TSHttpHookID = 15;
pub const TSHttpHookID_TS_HTTP_RESPONSE_CLIENT_HOOK: TSHttpHookID = 16;
pub const TSHttpHookID_TS_SSL_FIRST_HOOK: TSHttpHookID = 17;
pub const TSHttpHookID_TS_VCONN_PRE_ACCEPT_HOOK: TSHttpHookID = 17;
pub const TSHttpHookID_TS_SSL_SNI_HOOK: TSHttpHookID = 18;
pub const TSHttpHookID_TS_SSL_CERT_HOOK: TSHttpHookID = 18;
pub const TSHttpHookID_TS_SSL_SERVERNAME_HOOK: TSHttpHookID = 19;
pub const TSHttpHookID_TS_SSL_LAST_HOOK: TSHttpHookID = 19;
pub const TSHttpHookID_TS_HTTP_LAST_HOOK: TSHttpHookID = 20;
pub type TSHttpHookID = u32;
pub const TSLifecycleHookID_TS_LIFECYCLE_PORTS_INITIALIZED_HOOK: TSLifecycleHookID = 0;
pub const TSLifecycleHookID_TS_LIFECYCLE_PORTS_READY_HOOK: TSLifecycleHookID = 1;
pub const TSLifecycleHookID_TS_LIFECYCLE_CACHE_READY_HOOK: TSLifecycleHookID = 2;
pub const TSLifecycleHookID_TS_LIFECYCLE_SERVER_SSL_CTX_INITIALIZED_HOOK: TSLifecycleHookID = 3;
pub const TSLifecycleHookID_TS_LIFECYCLE_CLIENT_SSL_CTX_INITIALIZED_HOOK: TSLifecycleHookID = 4;
pub const TSLifecycleHookID_TS_LIFECYCLE_MSG_HOOK: TSLifecycleHookID = 5;
pub const TSLifecycleHookID_TS_LIFECYCLE_LAST_HOOK: TSLifecycleHookID = 6;
pub type TSLifecycleHookID = u32;
pub const TSEvent_TS_EVENT_NONE: TSEvent = 0;
pub const TSEvent_TS_EVENT_IMMEDIATE: TSEvent = 1;
pub const TSEvent_TS_EVENT_TIMEOUT: TSEvent = 2;
pub const TSEvent_TS_EVENT_ERROR: TSEvent = 3;
pub const TSEvent_TS_EVENT_CONTINUE: TSEvent = 4;
pub const TSEvent_TS_EVENT_VCONN_READ_READY: TSEvent = 100;
pub const TSEvent_TS_EVENT_VCONN_WRITE_READY: TSEvent = 101;
pub const TSEvent_TS_EVENT_VCONN_READ_COMPLETE: TSEvent = 102;
pub const TSEvent_TS_EVENT_VCONN_WRITE_COMPLETE: TSEvent = 103;
pub const TSEvent_TS_EVENT_VCONN_EOS: TSEvent = 104;
pub const TSEvent_TS_EVENT_VCONN_INACTIVITY_TIMEOUT: TSEvent = 105;
pub const TSEvent_TS_EVENT_VCONN_ACTIVE_TIMEOUT: TSEvent = 106;
pub const TSEvent_TS_EVENT_NET_CONNECT: TSEvent = 200;
pub const TSEvent_TS_EVENT_NET_CONNECT_FAILED: TSEvent = 201;
pub const TSEvent_TS_EVENT_NET_ACCEPT: TSEvent = 202;
pub const TSEvent_TS_EVENT_NET_ACCEPT_FAILED: TSEvent = 204;
pub const TSEvent_TS_EVENT_INTERNAL_206: TSEvent = 206;
pub const TSEvent_TS_EVENT_INTERNAL_207: TSEvent = 207;
pub const TSEvent_TS_EVENT_INTERNAL_208: TSEvent = 208;
pub const TSEvent_TS_EVENT_INTERNAL_209: TSEvent = 209;
pub const TSEvent_TS_EVENT_INTERNAL_210: TSEvent = 210;
pub const TSEvent_TS_EVENT_INTERNAL_211: TSEvent = 211;
pub const TSEvent_TS_EVENT_INTERNAL_212: TSEvent = 212;
pub const TSEvent_TS_EVENT_HOST_LOOKUP: TSEvent = 500;
pub const TSEvent_TS_EVENT_CACHE_OPEN_READ: TSEvent = 1102;
pub const TSEvent_TS_EVENT_CACHE_OPEN_READ_FAILED: TSEvent = 1103;
pub const TSEvent_TS_EVENT_CACHE_OPEN_WRITE: TSEvent = 1108;
pub const TSEvent_TS_EVENT_CACHE_OPEN_WRITE_FAILED: TSEvent = 1109;
pub const TSEvent_TS_EVENT_CACHE_REMOVE: TSEvent = 1112;
pub const TSEvent_TS_EVENT_CACHE_REMOVE_FAILED: TSEvent = 1113;
pub const TSEvent_TS_EVENT_CACHE_SCAN: TSEvent = 1120;
pub const TSEvent_TS_EVENT_CACHE_SCAN_FAILED: TSEvent = 1121;
pub const TSEvent_TS_EVENT_CACHE_SCAN_OBJECT: TSEvent = 1122;
pub const TSEvent_TS_EVENT_CACHE_SCAN_OPERATION_BLOCKED: TSEvent = 1123;
pub const TSEvent_TS_EVENT_CACHE_SCAN_OPERATION_FAILED: TSEvent = 1124;
pub const TSEvent_TS_EVENT_CACHE_SCAN_DONE: TSEvent = 1125;
pub const TSEvent_TS_EVENT_CACHE_LOOKUP: TSEvent = 1126;
pub const TSEvent_TS_EVENT_CACHE_READ: TSEvent = 1127;
pub const TSEvent_TS_EVENT_CACHE_DELETE: TSEvent = 1128;
pub const TSEvent_TS_EVENT_CACHE_WRITE: TSEvent = 1129;
pub const TSEvent_TS_EVENT_CACHE_WRITE_HEADER: TSEvent = 1130;
pub const TSEvent_TS_EVENT_CACHE_CLOSE: TSEvent = 1131;
pub const TSEvent_TS_EVENT_CACHE_LOOKUP_READY: TSEvent = 1132;
pub const TSEvent_TS_EVENT_CACHE_LOOKUP_COMPLETE: TSEvent = 1133;
pub const TSEvent_TS_EVENT_CACHE_READ_READY: TSEvent = 1134;
pub const TSEvent_TS_EVENT_CACHE_READ_COMPLETE: TSEvent = 1135;
pub const TSEvent_TS_EVENT_INTERNAL_1200: TSEvent = 1200;
pub const TSEvent_TS_AIO_EVENT_DONE: TSEvent = 3900;
pub const TSEvent_TS_EVENT_HTTP_CONTINUE: TSEvent = 60000;
pub const TSEvent_TS_EVENT_HTTP_ERROR: TSEvent = 60001;
pub const TSEvent_TS_EVENT_HTTP_READ_REQUEST_HDR: TSEvent = 60002;
pub const TSEvent_TS_EVENT_HTTP_OS_DNS: TSEvent = 60003;
pub const TSEvent_TS_EVENT_HTTP_SEND_REQUEST_HDR: TSEvent = 60004;
pub const TSEvent_TS_EVENT_HTTP_READ_CACHE_HDR: TSEvent = 60005;
pub const TSEvent_TS_EVENT_HTTP_READ_RESPONSE_HDR: TSEvent = 60006;
pub const TSEvent_TS_EVENT_HTTP_SEND_RESPONSE_HDR: TSEvent = 60007;
pub const TSEvent_TS_EVENT_HTTP_REQUEST_TRANSFORM: TSEvent = 60008;
pub const TSEvent_TS_EVENT_HTTP_RESPONSE_TRANSFORM: TSEvent = 60009;
pub const TSEvent_TS_EVENT_HTTP_SELECT_ALT: TSEvent = 60010;
pub const TSEvent_TS_EVENT_HTTP_TXN_START: TSEvent = 60011;
pub const TSEvent_TS_EVENT_HTTP_TXN_CLOSE: TSEvent = 60012;
pub const TSEvent_TS_EVENT_HTTP_SSN_START: TSEvent = 60013;
pub const TSEvent_TS_EVENT_HTTP_SSN_CLOSE: TSEvent = 60014;
pub const TSEvent_TS_EVENT_HTTP_CACHE_LOOKUP_COMPLETE: TSEvent = 60015;
pub const TSEvent_TS_EVENT_HTTP_PRE_REMAP: TSEvent = 60016;
pub const TSEvent_TS_EVENT_HTTP_POST_REMAP: TSEvent = 60017;
pub const TSEvent_TS_EVENT_LIFECYCLE_PORTS_INITIALIZED: TSEvent = 60018;
pub const TSEvent_TS_EVENT_LIFECYCLE_PORTS_READY: TSEvent = 60019;
pub const TSEvent_TS_EVENT_LIFECYCLE_CACHE_READY: TSEvent = 60020;
pub const TSEvent_TS_EVENT_LIFECYCLE_SERVER_SSL_CTX_INITIALIZED: TSEvent = 60021;
pub const TSEvent_TS_EVENT_LIFECYCLE_CLIENT_SSL_CTX_INITIALIZED: TSEvent = 60022;
pub const TSEvent_TS_EVENT_VCONN_PRE_ACCEPT: TSEvent = 60023;
pub const TSEvent_TS_EVENT_LIFECYCLE_MSG: TSEvent = 60024;
pub const TSEvent_TS_EVENT_MGMT_UPDATE: TSEvent = 60100;
pub const TSEvent_TS_EVENT_INTERNAL_60200: TSEvent = 60200;
pub const TSEvent_TS_EVENT_INTERNAL_60201: TSEvent = 60201;
pub const TSEvent_TS_EVENT_INTERNAL_60202: TSEvent = 60202;
pub const TSEvent_TS_EVENT_SSL_CERT: TSEvent = 60203;
pub const TSEvent_TS_EVENT_SSL_SERVERNAME: TSEvent = 60204;
pub type TSEvent = u32;
pub const TSServerState_TS_SRVSTATE_STATE_UNDEFINED: TSServerState = 0;
pub const TSServerState_TS_SRVSTATE_ACTIVE_TIMEOUT: TSServerState = 1;
pub const TSServerState_TS_SRVSTATE_BAD_INCOMING_RESPONSE: TSServerState = 2;
pub const TSServerState_TS_SRVSTATE_CONNECTION_ALIVE: TSServerState = 3;
pub const TSServerState_TS_SRVSTATE_CONNECTION_CLOSED: TSServerState = 4;
pub const TSServerState_TS_SRVSTATE_CONNECTION_ERROR: TSServerState = 5;
pub const TSServerState_TS_SRVSTATE_INACTIVE_TIMEOUT: TSServerState = 6;
pub const TSServerState_TS_SRVSTATE_OPEN_RAW_ERROR: TSServerState = 7;
pub const TSServerState_TS_SRVSTATE_PARSE_ERROR: TSServerState = 8;
pub const TSServerState_TS_SRVSTATE_TRANSACTION_COMPLETE: TSServerState = 9;
pub const TSServerState_TS_SRVSTATE_CONGEST_CONTROL_CONGESTED_ON_F: TSServerState = 10;
pub const TSServerState_TS_SRVSTATE_CONGEST_CONTROL_CONGESTED_ON_M: TSServerState = 11;
pub const TSServerState_TS_SRVSTATE_PARENT_RETRY: TSServerState = 12;
pub type TSServerState = u32;
pub const TSLookingUpType_TS_LOOKUP_UNDEFINED_LOOKUP: TSLookingUpType = 0;
pub const TSLookingUpType_TS_LOOKUP_PARENT_PROXY: TSLookingUpType = 1;
pub const TSLookingUpType_TS_LOOKUP_ORIGIN_SERVER: TSLookingUpType = 2;
pub const TSLookingUpType_TS_LOOKUP_INCOMING_ROUTER: TSLookingUpType = 3;
pub const TSLookingUpType_TS_LOOKUP_HOST_NONE: TSLookingUpType = 4;
pub type TSLookingUpType = u32;
pub const TSCacheLookupResult_TS_CACHE_LOOKUP_MISS: TSCacheLookupResult = 0;
pub const TSCacheLookupResult_TS_CACHE_LOOKUP_HIT_STALE: TSCacheLookupResult = 1;
pub const TSCacheLookupResult_TS_CACHE_LOOKUP_HIT_FRESH: TSCacheLookupResult = 2;
pub const TSCacheLookupResult_TS_CACHE_LOOKUP_SKIPPED: TSCacheLookupResult = 3;
pub type TSCacheLookupResult = u32;
pub const TSCacheDataType_TS_CACHE_DATA_TYPE_NONE: TSCacheDataType = 0;
pub const TSCacheDataType_TS_CACHE_DATA_TYPE_HTTP: TSCacheDataType = 1;
pub const TSCacheDataType_TS_CACHE_DATA_TYPE_OTHER: TSCacheDataType = 2;
pub type TSCacheDataType = u32;
pub const TSCacheError_TS_CACHE_ERROR_NO_DOC: TSCacheError = -20400;
pub const TSCacheError_TS_CACHE_ERROR_DOC_BUSY: TSCacheError = -20401;
pub const TSCacheError_TS_CACHE_ERROR_NOT_READY: TSCacheError = -20407;
pub type TSCacheError = i32;
pub const TSCacheScanResult_TS_CACHE_SCAN_RESULT_DONE: TSCacheScanResult = 0;
pub const TSCacheScanResult_TS_CACHE_SCAN_RESULT_CONTINUE: TSCacheScanResult = 1;
pub const TSCacheScanResult_TS_CACHE_SCAN_RESULT_DELETE: TSCacheScanResult = 10;
pub const TSCacheScanResult_TS_CACHE_SCAN_RESULT_DELETE_ALL_ALTERNATES: TSCacheScanResult = 11;
pub const TSCacheScanResult_TS_CACHE_SCAN_RESULT_UPDATE: TSCacheScanResult = 12;
pub const TSCacheScanResult_TS_CACHE_SCAN_RESULT_RETRY: TSCacheScanResult = 13;
pub type TSCacheScanResult = u32;
pub const TSHttpTxnInfoKey_TS_TXN_INFO_NONE: TSHttpTxnInfoKey = -1;
pub const TSHttpTxnInfoKey_TS_TXN_INFO_CACHE_HIT_RAM: TSHttpTxnInfoKey = 0;
pub const TSHttpTxnInfoKey_TS_TXN_INFO_CACHE_COMPRESSED_IN_RAM: TSHttpTxnInfoKey = 1;
pub const TSHttpTxnInfoKey_TS_TXN_INFO_CACHE_HIT_RWW: TSHttpTxnInfoKey = 2;
pub const TSHttpTxnInfoKey_TS_TXN_INFO_CACHE_OPEN_READ_TRIES: TSHttpTxnInfoKey = 3;
pub const TSHttpTxnInfoKey_TS_TXN_INFO_CACHE_OPEN_WRITE_TRIES: TSHttpTxnInfoKey = 4;
pub const TSHttpTxnInfoKey_TS_TXN_INFO_CACHE_VOLUME: TSHttpTxnInfoKey = 5;
pub const TSHttpTxnInfoKey_TS_TXN_INFO_LAST_ENTRY: TSHttpTxnInfoKey = 6;
pub type TSHttpTxnInfoKey = i32;
pub const TSVConnCloseFlags_TS_VC_CLOSE_ABORT: TSVConnCloseFlags = -1;
pub const TSVConnCloseFlags_TS_VC_CLOSE_NORMAL: TSVConnCloseFlags = 1;
pub type TSVConnCloseFlags = i32;
pub const TSIOBufferSizeIndex_TS_IOBUFFER_SIZE_INDEX_128: TSIOBufferSizeIndex = 0;
pub const TSIOBufferSizeIndex_TS_IOBUFFER_SIZE_INDEX_256: TSIOBufferSizeIndex = 1;
pub const TSIOBufferSizeIndex_TS_IOBUFFER_SIZE_INDEX_512: TSIOBufferSizeIndex = 2;
pub const TSIOBufferSizeIndex_TS_IOBUFFER_SIZE_INDEX_1K: TSIOBufferSizeIndex = 3;
pub const TSIOBufferSizeIndex_TS_IOBUFFER_SIZE_INDEX_2K: TSIOBufferSizeIndex = 4;
pub const TSIOBufferSizeIndex_TS_IOBUFFER_SIZE_INDEX_4K: TSIOBufferSizeIndex = 5;
pub const TSIOBufferSizeIndex_TS_IOBUFFER_SIZE_INDEX_8K: TSIOBufferSizeIndex = 6;
pub const TSIOBufferSizeIndex_TS_IOBUFFER_SIZE_INDEX_16K: TSIOBufferSizeIndex = 7;
pub const TSIOBufferSizeIndex_TS_IOBUFFER_SIZE_INDEX_32K: TSIOBufferSizeIndex = 8;
pub const TSIOBufferSizeIndex_TS_IOBUFFER_SIZE_INDEX_64K: TSIOBufferSizeIndex = 9;
pub const TSIOBufferSizeIndex_TS_IOBUFFER_SIZE_INDEX_128K: TSIOBufferSizeIndex = 10;
pub const TSIOBufferSizeIndex_TS_IOBUFFER_SIZE_INDEX_256K: TSIOBufferSizeIndex = 11;
pub const TSIOBufferSizeIndex_TS_IOBUFFER_SIZE_INDEX_512K: TSIOBufferSizeIndex = 12;
pub const TSIOBufferSizeIndex_TS_IOBUFFER_SIZE_INDEX_1M: TSIOBufferSizeIndex = 13;
pub const TSIOBufferSizeIndex_TS_IOBUFFER_SIZE_INDEX_2M: TSIOBufferSizeIndex = 14;
pub type TSIOBufferSizeIndex = u32;
pub const TSReturnCode_TS_ERROR: TSReturnCode = -1;
pub const TSReturnCode_TS_SUCCESS: TSReturnCode = 0;
pub type TSReturnCode = i32;
pub const TSFetchWakeUpOptions_NO_CALLBACK: TSFetchWakeUpOptions = 0;
pub const TSFetchWakeUpOptions_AFTER_HEADER: TSFetchWakeUpOptions = 1;
pub const TSFetchWakeUpOptions_AFTER_BODY: TSFetchWakeUpOptions = 2;
pub type TSFetchWakeUpOptions = u32;
pub const TSServerSessionSharingMatchType_TS_SERVER_SESSION_SHARING_MATCH_NONE:
    TSServerSessionSharingMatchType = 0;
pub const TSServerSessionSharingMatchType_TS_SERVER_SESSION_SHARING_MATCH_BOTH:
    TSServerSessionSharingMatchType = 1;
pub const TSServerSessionSharingMatchType_TS_SERVER_SESSION_SHARING_MATCH_IP:
    TSServerSessionSharingMatchType = 2;
pub const TSServerSessionSharingMatchType_TS_SERVER_SESSION_SHARING_MATCH_HOST:
    TSServerSessionSharingMatchType = 3;
pub type TSServerSessionSharingMatchType = u32;
pub const TSServerSessionSharingPoolType_TS_SERVER_SESSION_SHARING_POOL_GLOBAL:
    TSServerSessionSharingPoolType = 0;
pub const TSServerSessionSharingPoolType_TS_SERVER_SESSION_SHARING_POOL_THREAD:
    TSServerSessionSharingPoolType = 1;
pub type TSServerSessionSharingPoolType = u32;
pub const TSRecordType_TS_RECORDTYPE_NULL: TSRecordType = 0;
pub const TSRecordType_TS_RECORDTYPE_CONFIG: TSRecordType = 1;
pub const TSRecordType_TS_RECORDTYPE_PROCESS: TSRecordType = 2;
pub const TSRecordType_TS_RECORDTYPE_NODE: TSRecordType = 4;
pub const TSRecordType_TS_RECORDTYPE_CLUSTER: TSRecordType = 8;
pub const TSRecordType_TS_RECORDTYPE_LOCAL: TSRecordType = 16;
pub const TSRecordType_TS_RECORDTYPE_PLUGIN: TSRecordType = 32;
pub const TSRecordType_TS_RECORDTYPE_ALL: TSRecordType = 63;
pub type TSRecordType = u32;
pub const TSRecordDataType_TS_RECORDDATATYPE_NULL: TSRecordDataType = 0;
pub const TSRecordDataType_TS_RECORDDATATYPE_INT: TSRecordDataType = 1;
pub const TSRecordDataType_TS_RECORDDATATYPE_FLOAT: TSRecordDataType = 2;
pub const TSRecordDataType_TS_RECORDDATATYPE_STRING: TSRecordDataType = 3;
pub const TSRecordDataType_TS_RECORDDATATYPE_COUNTER: TSRecordDataType = 4;
pub const TSRecordDataType_TS_RECORDDATATYPE_STAT_CONST: TSRecordDataType = 5;
pub const TSRecordDataType_TS_RECORDDATATYPE_STAT_FX: TSRecordDataType = 6;
pub const TSRecordDataType_TS_RECORDDATATYPE_MAX: TSRecordDataType = 7;
pub type TSRecordDataType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub union TSRecordData {
    pub rec_int: i64,
    pub rec_float: f32,
    pub rec_string: *mut ::std::os::raw::c_char,
    pub rec_counter: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_TSRecordData() {
    assert_eq!(
        ::std::mem::size_of::<TSRecordData>(),
        8usize,
        concat!("Size of: ", stringify!(TSRecordData))
    );
    assert_eq!(
        ::std::mem::align_of::<TSRecordData>(),
        8usize,
        concat!("Alignment of ", stringify!(TSRecordData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSRecordData>())).rec_int as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSRecordData),
            "::",
            stringify!(rec_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSRecordData>())).rec_float as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSRecordData),
            "::",
            stringify!(rec_float)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSRecordData>())).rec_string as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSRecordData),
            "::",
            stringify!(rec_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSRecordData>())).rec_counter as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSRecordData),
            "::",
            stringify!(rec_counter)
        )
    );
}
pub const TSRecordPersistType_TS_RECORDP_NULL: TSRecordPersistType = 0;
pub const TSRecordPersistType_TS_RECORDP_PERSISTENT: TSRecordPersistType = 1;
pub const TSRecordPersistType_TS_RECORDP_NON_PERSISTENT: TSRecordPersistType = 2;
pub type TSRecordPersistType = u32;
pub const TSRecordUpdateType_TS_RECORDUPDATE_NULL: TSRecordUpdateType = 0;
pub const TSRecordUpdateType_TS_RECORDUPDATE_DYNAMIC: TSRecordUpdateType = 1;
pub const TSRecordUpdateType_TS_RECORDUPDATE_RESTART_TS: TSRecordUpdateType = 2;
pub const TSRecordUpdateType_TS_RECORDUPDATE_RESTART_TM: TSRecordUpdateType = 3;
pub const TSRecordUpdateType_TS_RECORDUPDATE_RESTART_TC: TSRecordUpdateType = 4;
pub type TSRecordUpdateType = u32;
pub const TSRecordCheckType_TS_RECORDCHECK_NULL: TSRecordCheckType = 0;
pub const TSRecordCheckType_TS_RECORDCHECK_STR: TSRecordCheckType = 1;
pub const TSRecordCheckType_TS_RECORDCHECK_INT: TSRecordCheckType = 2;
pub const TSRecordCheckType_TS_RECORDCHECK_IP: TSRecordCheckType = 3;
pub type TSRecordCheckType = u32;
pub const TSRecordModeType_TS_RECORDMODE_NULL: TSRecordModeType = 0;
pub const TSRecordModeType_TS_RECORDMODE_CLIENT: TSRecordModeType = 1;
pub const TSRecordModeType_TS_RECORDMODE_SERVER: TSRecordModeType = 2;
pub const TSRecordModeType_TS_RECORDMODE_STAND_ALONE: TSRecordModeType = 3;
pub type TSRecordModeType = u32;
pub const TSRecordAccessType_TS_RECORDACCESS_NULL: TSRecordAccessType = 0;
pub const TSRecordAccessType_TS_RECORDACCESS_NO_ACCESS: TSRecordAccessType = 1;
pub const TSRecordAccessType_TS_RECORDACCESS_READ_ONLY: TSRecordAccessType = 2;
pub type TSRecordAccessType = u32;
pub const TSOverridableConfigKey_TS_CONFIG_NULL: TSOverridableConfigKey = -1;
pub const TSOverridableConfigKey_TS_CONFIG_URL_REMAP_PRISTINE_HOST_HDR: TSOverridableConfigKey = 0;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CHUNKING_ENABLED: TSOverridableConfigKey = 1;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_NEGATIVE_CACHING_ENABLED: TSOverridableConfigKey =
    2;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_NEGATIVE_CACHING_LIFETIME: TSOverridableConfigKey =
    3;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_WHEN_TO_REVALIDATE: TSOverridableConfigKey =
    4;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_KEEP_ALIVE_ENABLED_IN: TSOverridableConfigKey = 5;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_KEEP_ALIVE_ENABLED_OUT: TSOverridableConfigKey = 6;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_KEEP_ALIVE_POST_OUT: TSOverridableConfigKey = 7;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_SERVER_SESSION_SHARING_MATCH:
    TSOverridableConfigKey = 8;
pub const TSOverridableConfigKey_TS_CONFIG_NET_SOCK_RECV_BUFFER_SIZE_OUT: TSOverridableConfigKey =
    9;
pub const TSOverridableConfigKey_TS_CONFIG_NET_SOCK_SEND_BUFFER_SIZE_OUT: TSOverridableConfigKey =
    10;
pub const TSOverridableConfigKey_TS_CONFIG_NET_SOCK_OPTION_FLAG_OUT: TSOverridableConfigKey = 11;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_FORWARD_PROXY_AUTH_TO_PARENT:
    TSOverridableConfigKey = 12;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_ANONYMIZE_REMOVE_FROM: TSOverridableConfigKey = 13;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_ANONYMIZE_REMOVE_REFERER: TSOverridableConfigKey =
    14;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_ANONYMIZE_REMOVE_USER_AGENT:
    TSOverridableConfigKey = 15;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_ANONYMIZE_REMOVE_COOKIE: TSOverridableConfigKey =
    16;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_ANONYMIZE_REMOVE_CLIENT_IP: TSOverridableConfigKey =
    17;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_ANONYMIZE_INSERT_CLIENT_IP: TSOverridableConfigKey =
    18;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_RESPONSE_SERVER_ENABLED: TSOverridableConfigKey =
    19;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_INSERT_SQUID_X_FORWARDED_FOR:
    TSOverridableConfigKey = 20;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_SERVER_TCP_INIT_CWND: TSOverridableConfigKey = 21;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_SEND_HTTP11_REQUESTS: TSOverridableConfigKey = 22;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_HTTP: TSOverridableConfigKey = 23;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_CLUSTER_CACHE_LOCAL: TSOverridableConfigKey =
    24;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_IGNORE_CLIENT_NO_CACHE:
    TSOverridableConfigKey = 25;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_IGNORE_CLIENT_CC_MAX_AGE:
    TSOverridableConfigKey = 26;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_IMS_ON_CLIENT_NO_CACHE:
    TSOverridableConfigKey = 27;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_IGNORE_SERVER_NO_CACHE:
    TSOverridableConfigKey = 28;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_CACHE_RESPONSES_TO_COOKIES:
    TSOverridableConfigKey = 29;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_IGNORE_AUTHENTICATION:
    TSOverridableConfigKey = 30;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_CACHE_URLS_THAT_LOOK_DYNAMIC:
    TSOverridableConfigKey = 31;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_REQUIRED_HEADERS: TSOverridableConfigKey = 32;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_INSERT_REQUEST_VIA_STR: TSOverridableConfigKey = 33;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_INSERT_RESPONSE_VIA_STR: TSOverridableConfigKey =
    34;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_HEURISTIC_MIN_LIFETIME:
    TSOverridableConfigKey = 35;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_HEURISTIC_MAX_LIFETIME:
    TSOverridableConfigKey = 36;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_GUARANTEED_MIN_LIFETIME:
    TSOverridableConfigKey = 37;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_GUARANTEED_MAX_LIFETIME:
    TSOverridableConfigKey = 38;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_MAX_STALE_AGE: TSOverridableConfigKey = 39;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_KEEP_ALIVE_NO_ACTIVITY_TIMEOUT_IN:
    TSOverridableConfigKey = 40;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_KEEP_ALIVE_NO_ACTIVITY_TIMEOUT_OUT:
    TSOverridableConfigKey = 41;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_TRANSACTION_NO_ACTIVITY_TIMEOUT_IN:
    TSOverridableConfigKey = 42;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_TRANSACTION_NO_ACTIVITY_TIMEOUT_OUT:
    TSOverridableConfigKey = 43;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_TRANSACTION_ACTIVE_TIMEOUT_OUT:
    TSOverridableConfigKey = 44;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_ORIGIN_MAX_CONNECTIONS: TSOverridableConfigKey = 45;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CONNECT_ATTEMPTS_MAX_RETRIES:
    TSOverridableConfigKey = 46;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CONNECT_ATTEMPTS_MAX_RETRIES_DEAD_SERVER:
    TSOverridableConfigKey = 47;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CONNECT_ATTEMPTS_RR_RETRIES:
    TSOverridableConfigKey = 48;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CONNECT_ATTEMPTS_TIMEOUT: TSOverridableConfigKey =
    49;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_POST_CONNECT_ATTEMPTS_TIMEOUT:
    TSOverridableConfigKey = 50;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_DOWN_SERVER_CACHE_TIME: TSOverridableConfigKey = 51;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_DOWN_SERVER_ABORT_THRESHOLD:
    TSOverridableConfigKey = 52;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_FUZZ_TIME: TSOverridableConfigKey = 53;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_FUZZ_MIN_TIME: TSOverridableConfigKey = 54;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_DOC_IN_CACHE_SKIP_DNS: TSOverridableConfigKey = 55;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_BACKGROUND_FILL_ACTIVE_TIMEOUT:
    TSOverridableConfigKey = 56;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_RESPONSE_SERVER_STR: TSOverridableConfigKey = 57;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_HEURISTIC_LM_FACTOR: TSOverridableConfigKey =
    58;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_FUZZ_PROBABILITY: TSOverridableConfigKey = 59;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_BACKGROUND_FILL_COMPLETED_THRESHOLD:
    TSOverridableConfigKey = 60;
pub const TSOverridableConfigKey_TS_CONFIG_NET_SOCK_PACKET_MARK_OUT: TSOverridableConfigKey = 61;
pub const TSOverridableConfigKey_TS_CONFIG_NET_SOCK_PACKET_TOS_OUT: TSOverridableConfigKey = 62;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_INSERT_AGE_IN_RESPONSE: TSOverridableConfigKey = 63;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CHUNKING_SIZE: TSOverridableConfigKey = 64;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_FLOW_CONTROL_ENABLED: TSOverridableConfigKey = 65;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_FLOW_CONTROL_LOW_WATER_MARK:
    TSOverridableConfigKey = 66;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_FLOW_CONTROL_HIGH_WATER_MARK:
    TSOverridableConfigKey = 67;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_RANGE_LOOKUP: TSOverridableConfigKey = 68;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_NORMALIZE_AE_GZIP: TSOverridableConfigKey = 69;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_DEFAULT_BUFFER_SIZE: TSOverridableConfigKey = 70;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_DEFAULT_BUFFER_WATER_MARK: TSOverridableConfigKey =
    71;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_REQUEST_HEADER_MAX_SIZE: TSOverridableConfigKey =
    72;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_RESPONSE_HEADER_MAX_SIZE: TSOverridableConfigKey =
    73;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_NEGATIVE_REVALIDATING_ENABLED:
    TSOverridableConfigKey = 74;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_NEGATIVE_REVALIDATING_LIFETIME:
    TSOverridableConfigKey = 75;
pub const TSOverridableConfigKey_TS_CONFIG_SSL_HSTS_MAX_AGE: TSOverridableConfigKey = 76;
pub const TSOverridableConfigKey_TS_CONFIG_SSL_HSTS_INCLUDE_SUBDOMAINS: TSOverridableConfigKey = 77;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_OPEN_READ_RETRY_TIME: TSOverridableConfigKey =
    78;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_MAX_OPEN_READ_RETRIES:
    TSOverridableConfigKey = 79;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_RANGE_WRITE: TSOverridableConfigKey = 80;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_POST_CHECK_CONTENT_LENGTH_ENABLED:
    TSOverridableConfigKey = 81;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_GLOBAL_USER_AGENT_HEADER: TSOverridableConfigKey =
    82;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_AUTH_SERVER_SESSION_PRIVATE:
    TSOverridableConfigKey = 83;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_SLOW_LOG_THRESHOLD: TSOverridableConfigKey = 84;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_GENERATION: TSOverridableConfigKey = 85;
pub const TSOverridableConfigKey_TS_CONFIG_BODY_FACTORY_TEMPLATE_BASE: TSOverridableConfigKey = 86;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_OPEN_WRITE_FAIL_ACTION:
    TSOverridableConfigKey = 87;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_ENABLE_REDIRECTION: TSOverridableConfigKey = 88;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_NUMBER_OF_REDIRECTIONS: TSOverridableConfigKey = 89;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_CACHE_MAX_OPEN_WRITE_RETRIES:
    TSOverridableConfigKey = 90;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_REDIRECT_USE_ORIG_CACHE_KEY:
    TSOverridableConfigKey = 91;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_ATTACH_SERVER_SESSION_TO_CLIENT:
    TSOverridableConfigKey = 92;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_SAFE_REQUESTS_RETRYABLE: TSOverridableConfigKey =
    93;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_ORIGIN_MAX_CONNECTIONS_QUEUE:
    TSOverridableConfigKey = 94;
pub const TSOverridableConfigKey_TS_CONFIG_WEBSOCKET_NO_ACTIVITY_TIMEOUT: TSOverridableConfigKey =
    95;
pub const TSOverridableConfigKey_TS_CONFIG_WEBSOCKET_ACTIVE_TIMEOUT: TSOverridableConfigKey = 96;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_UNCACHEABLE_REQUESTS_BYPASS_PARENT:
    TSOverridableConfigKey = 97;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_PARENT_PROXY_TOTAL_CONNECT_ATTEMPTS:
    TSOverridableConfigKey = 98;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_TRANSACTION_ACTIVE_TIMEOUT_IN:
    TSOverridableConfigKey = 99;
pub const TSOverridableConfigKey_TS_CONFIG_SRV_ENABLED: TSOverridableConfigKey = 100;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_FORWARD_CONNECT_METHOD: TSOverridableConfigKey =
    101;
pub const TSOverridableConfigKey_TS_CONFIG_SSL_CERT_FILENAME: TSOverridableConfigKey = 102;
pub const TSOverridableConfigKey_TS_CONFIG_SSL_CERT_FILEPATH: TSOverridableConfigKey = 103;
pub const TSOverridableConfigKey_TS_CONFIG_PARENT_FAILURES_UPDATE_HOSTDB: TSOverridableConfigKey =
    104;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_PARENT_PROXY_FAIL_THRESHOLD:
    TSOverridableConfigKey = 105;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_PARENT_PROXY_RETRY_TIME: TSOverridableConfigKey =
    106;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_PER_PARENT_CONNECT_ATTEMPTS:
    TSOverridableConfigKey = 107;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_PARENT_CONNECT_ATTEMPT_TIMEOUT:
    TSOverridableConfigKey = 108;
pub const TSOverridableConfigKey_TS_CONFIG_SSL_CLIENT_VERIFY_SERVER: TSOverridableConfigKey = 109;
pub const TSOverridableConfigKey_TS_CONFIG_HTTP_ALLOW_MULTI_RANGE: TSOverridableConfigKey = 110;
pub const TSOverridableConfigKey_TS_CONFIG_LAST_ENTRY: TSOverridableConfigKey = 111;
pub type TSOverridableConfigKey = i32;
pub const TSThreadPool_TS_THREAD_POOL_DEFAULT: TSThreadPool = -1;
pub const TSThreadPool_TS_THREAD_POOL_NET: TSThreadPool = 0;
pub const TSThreadPool_TS_THREAD_POOL_TASK: TSThreadPool = 1;
pub const TSThreadPool_TS_THREAD_POOL_SSL: TSThreadPool = 2;
pub const TSThreadPool_TS_THREAD_POOL_DNS: TSThreadPool = 3;
pub const TSThreadPool_TS_THREAD_POOL_REMAP: TSThreadPool = 4;
pub const TSThreadPool_TS_THREAD_POOL_CLUSTER: TSThreadPool = 5;
pub const TSThreadPool_TS_THREAD_POOL_UDP: TSThreadPool = 6;
pub type TSThreadPool = i32;
pub type TSHRTime = i64;
pub const TSMilestonesType_TS_MILESTONE_NULL: TSMilestonesType = -1;
pub const TSMilestonesType_TS_MILESTONE_UA_BEGIN: TSMilestonesType = 0;
pub const TSMilestonesType_TS_MILESTONE_UA_FIRST_READ: TSMilestonesType = 1;
pub const TSMilestonesType_TS_MILESTONE_UA_READ_HEADER_DONE: TSMilestonesType = 2;
pub const TSMilestonesType_TS_MILESTONE_UA_BEGIN_WRITE: TSMilestonesType = 3;
pub const TSMilestonesType_TS_MILESTONE_UA_CLOSE: TSMilestonesType = 4;
pub const TSMilestonesType_TS_MILESTONE_SERVER_FIRST_CONNECT: TSMilestonesType = 5;
pub const TSMilestonesType_TS_MILESTONE_SERVER_CONNECT: TSMilestonesType = 6;
pub const TSMilestonesType_TS_MILESTONE_SERVER_CONNECT_END: TSMilestonesType = 7;
pub const TSMilestonesType_TS_MILESTONE_SERVER_BEGIN_WRITE: TSMilestonesType = 8;
pub const TSMilestonesType_TS_MILESTONE_SERVER_FIRST_READ: TSMilestonesType = 9;
pub const TSMilestonesType_TS_MILESTONE_SERVER_READ_HEADER_DONE: TSMilestonesType = 10;
pub const TSMilestonesType_TS_MILESTONE_SERVER_CLOSE: TSMilestonesType = 11;
pub const TSMilestonesType_TS_MILESTONE_CACHE_OPEN_READ_BEGIN: TSMilestonesType = 12;
pub const TSMilestonesType_TS_MILESTONE_CACHE_OPEN_READ_END: TSMilestonesType = 13;
pub const TSMilestonesType_TS_MILESTONE_CACHE_OPEN_WRITE_BEGIN: TSMilestonesType = 14;
pub const TSMilestonesType_TS_MILESTONE_CACHE_OPEN_WRITE_END: TSMilestonesType = 15;
pub const TSMilestonesType_TS_MILESTONE_DNS_LOOKUP_BEGIN: TSMilestonesType = 16;
pub const TSMilestonesType_TS_MILESTONE_DNS_LOOKUP_END: TSMilestonesType = 17;
pub const TSMilestonesType_TS_MILESTONE_SM_START: TSMilestonesType = 18;
pub const TSMilestonesType_TS_MILESTONE_SM_FINISH: TSMilestonesType = 19;
pub const TSMilestonesType_TS_MILESTONE_PLUGIN_ACTIVE: TSMilestonesType = 20;
pub const TSMilestonesType_TS_MILESTONE_PLUGIN_TOTAL: TSMilestonesType = 21;
pub const TSMilestonesType_TS_MILESTONE_LAST_ENTRY: TSMilestonesType = 22;
pub type TSMilestonesType = i32;
pub type TSMgmtInt = i64;
pub type TSMgmtCounter = i64;
pub type TSMgmtFloat = f32;
pub type TSMgmtString = *mut ::std::os::raw::c_char;
pub const TSMgmtSource_TS_MGMT_SOURCE_NULL: TSMgmtSource = 0;
pub const TSMgmtSource_TS_MGMT_SOURCE_DEFAULT: TSMgmtSource = 1;
pub const TSMgmtSource_TS_MGMT_SOURCE_PLUGIN: TSMgmtSource = 2;
pub const TSMgmtSource_TS_MGMT_SOURCE_EXPLICIT: TSMgmtSource = 3;
pub const TSMgmtSource_TS_MGMT_SOURCE_ENV: TSMgmtSource = 4;
pub type TSMgmtSource = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_file {
    _unused: [u8; 0],
}
pub type TSFile = *mut tsapi_file;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_mloc {
    _unused: [u8; 0],
}
pub type TSMLoc = *mut tsapi_mloc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_mbuffer {
    _unused: [u8; 0],
}
pub type TSMBuffer = *mut tsapi_mbuffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_httpssn {
    _unused: [u8; 0],
}
pub type TSHttpSsn = *mut tsapi_httpssn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_httptxn {
    _unused: [u8; 0],
}
pub type TSHttpTxn = *mut tsapi_httptxn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_ssl_obj {
    _unused: [u8; 0],
}
pub type TSSslConnection = *mut tsapi_ssl_obj;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_httpaltinfo {
    _unused: [u8; 0],
}
pub type TSHttpAltInfo = *mut tsapi_httpaltinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_mimeparser {
    _unused: [u8; 0],
}
pub type TSMimeParser = *mut tsapi_mimeparser;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_httpparser {
    _unused: [u8; 0],
}
pub type TSHttpParser = *mut tsapi_httpparser;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_cachekey {
    _unused: [u8; 0],
}
pub type TSCacheKey = *mut tsapi_cachekey;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_cachehttpinfo {
    _unused: [u8; 0],
}
pub type TSCacheHttpInfo = *mut tsapi_cachehttpinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_cachetxn {
    _unused: [u8; 0],
}
pub type TSCacheTxn = *mut tsapi_cachetxn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_port {
    _unused: [u8; 0],
}
pub type TSPortDescriptor = *mut tsapi_port;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_vio {
    _unused: [u8; 0],
}
pub type TSVIO = *mut tsapi_vio;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_thread {
    _unused: [u8; 0],
}
pub type TSThread = *mut tsapi_thread;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_mutex {
    _unused: [u8; 0],
}
pub type TSMutex = *mut tsapi_mutex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_config {
    _unused: [u8; 0],
}
pub type TSConfig = *mut tsapi_config;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_cont {
    _unused: [u8; 0],
}
pub type TSCont = *mut tsapi_cont;
pub type TSVConn = *mut tsapi_cont;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_ssl_context {
    _unused: [u8; 0],
}
pub type TSSslContext = *mut tsapi_ssl_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_action {
    _unused: [u8; 0],
}
pub type TSAction = *mut tsapi_action;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_iobuffer {
    _unused: [u8; 0],
}
pub type TSIOBuffer = *mut tsapi_iobuffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_iobufferdata {
    _unused: [u8; 0],
}
pub type TSIOBufferData = *mut tsapi_iobufferdata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_bufferblock {
    _unused: [u8; 0],
}
pub type TSIOBufferBlock = *mut tsapi_bufferblock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_bufferreader {
    _unused: [u8; 0],
}
pub type TSIOBufferReader = *mut tsapi_bufferreader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_hostlookupresult {
    _unused: [u8; 0],
}
pub type TSHostLookupResult = *mut tsapi_hostlookupresult;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_aiocallback {
    _unused: [u8; 0],
}
pub type TSAIOCallback = *mut tsapi_aiocallback;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_net_accept {
    _unused: [u8; 0],
}
pub type TSAcceptor = *mut tsapi_net_accept;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_protocol_set {
    _unused: [u8; 0],
}
pub type TSNextProtocolSet = *mut tsapi_protocol_set;
pub type TSThreadFunc = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type TSEventFunc = ::std::option::Option<
    unsafe extern "C" fn(
        contp: TSCont,
        event: TSEvent,
        edata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type TSConfigDestroyFunc =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSFetchEvent {
    pub success_event_id: ::std::os::raw::c_int,
    pub failure_event_id: ::std::os::raw::c_int,
    pub timeout_event_id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TSFetchEvent() {
    assert_eq!(
        ::std::mem::size_of::<TSFetchEvent>(),
        12usize,
        concat!("Size of: ", stringify!(TSFetchEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<TSFetchEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(TSFetchEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSFetchEvent>())).success_event_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSFetchEvent),
            "::",
            stringify!(success_event_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSFetchEvent>())).failure_event_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TSFetchEvent),
            "::",
            stringify!(failure_event_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSFetchEvent>())).timeout_event_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSFetchEvent),
            "::",
            stringify!(timeout_event_id)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TSFetchUrlParams {
    pub request: *const ::std::os::raw::c_char,
    pub request_len: ::std::os::raw::c_int,
    pub ip: sockaddr_storage,
    pub port: ::std::os::raw::c_int,
    pub contp: TSCont,
    pub events: TSFetchEvent,
    pub options: TSFetchWakeUpOptions,
    pub next: *mut TSFetchUrlParams,
}
#[test]
fn bindgen_test_layout_TSFetchUrlParams() {
    assert_eq!(
        ::std::mem::size_of::<TSFetchUrlParams>(),
        184usize,
        concat!("Size of: ", stringify!(TSFetchUrlParams))
    );
    assert_eq!(
        ::std::mem::align_of::<TSFetchUrlParams>(),
        8usize,
        concat!("Alignment of ", stringify!(TSFetchUrlParams))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSFetchUrlParams>())).request as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSFetchUrlParams),
            "::",
            stringify!(request)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSFetchUrlParams>())).request_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSFetchUrlParams),
            "::",
            stringify!(request_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSFetchUrlParams>())).ip as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSFetchUrlParams),
            "::",
            stringify!(ip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSFetchUrlParams>())).port as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(TSFetchUrlParams),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSFetchUrlParams>())).contp as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(TSFetchUrlParams),
            "::",
            stringify!(contp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSFetchUrlParams>())).events as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(TSFetchUrlParams),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSFetchUrlParams>())).options as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(TSFetchUrlParams),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSFetchUrlParams>())).next as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(TSFetchUrlParams),
            "::",
            stringify!(next)
        )
    );
}
pub type TSFetchUrlParams_t = TSFetchUrlParams;
extern "C" {
    pub fn TSPluginInit(argc: ::std::os::raw::c_int, argv: *mut *const ::std::os::raw::c_char);
}
pub const TSUuidVersion_TS_UUID_UNDEFINED: TSUuidVersion = 0;
pub const TSUuidVersion_TS_UUID_V1: TSUuidVersion = 1;
pub const TSUuidVersion_TS_UUID_V2: TSUuidVersion = 2;
pub const TSUuidVersion_TS_UUID_V3: TSUuidVersion = 3;
pub const TSUuidVersion_TS_UUID_V4: TSUuidVersion = 4;
pub const TSUuidVersion_TS_UUID_V5: TSUuidVersion = 5;
pub type TSUuidVersion = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_uuid {
    _unused: [u8; 0],
}
pub type TSUuid = *mut tsapi_uuid;
extern "C" {
    pub fn TSHandleMLocRelease(bufp: TSMBuffer, parent: TSMLoc, mloc: TSMLoc) -> TSReturnCode;
}
extern "C" {
    pub fn TSInstallDirGet() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSConfigDirGet() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSRuntimeDirGet() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSPluginDirGet() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSTrafficServerVersionGet() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSTrafficServerVersionGetMajor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSTrafficServerVersionGetMinor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSTrafficServerVersionGetPatch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSPluginRegister(plugin_info: *const TSPluginRegistrationInfo) -> TSReturnCode;
}
extern "C" {
    pub fn TSfopen(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> TSFile;
}
extern "C" {
    pub fn TSfclose(filep: TSFile);
}
extern "C" {
    pub fn TSfread(filep: TSFile, buf: *mut ::std::os::raw::c_void, length: usize) -> usize;
}
extern "C" {
    pub fn TSfwrite(filep: TSFile, buf: *const ::std::os::raw::c_void, length: usize) -> usize;
}
extern "C" {
    pub fn TSfflush(filep: TSFile);
}
extern "C" {
    pub fn TSfgets(
        filep: TSFile,
        buf: *mut ::std::os::raw::c_char,
        length: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSError(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn TSMBufferCreate() -> TSMBuffer;
}
extern "C" {
    pub fn TSMBufferDestroy(bufp: TSMBuffer) -> TSReturnCode;
}
extern "C" {
    pub fn TSUrlCreate(bufp: TSMBuffer, locp: *mut TSMLoc) -> TSReturnCode;
}
extern "C" {
    pub fn TSUrlDestroy(bufp: TSMBuffer, offset: TSMLoc) -> TSReturnCode;
}
extern "C" {
    pub fn TSUrlClone(
        dest_bufp: TSMBuffer,
        src_bufp: TSMBuffer,
        src_url: TSMLoc,
        locp: *mut TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSUrlCopy(
        dest_bufp: TSMBuffer,
        dest_offset: TSMLoc,
        src_bufp: TSMBuffer,
        src_offset: TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSUrlPrint(bufp: TSMBuffer, offset: TSMLoc, iobufp: TSIOBuffer);
}
extern "C" {
    pub fn TSUrlParse(
        bufp: TSMBuffer,
        offset: TSMLoc,
        start: *mut *const ::std::os::raw::c_char,
        end: *const ::std::os::raw::c_char,
    ) -> TSParseResult;
}
extern "C" {
    pub fn TSUrlLengthGet(bufp: TSMBuffer, offset: TSMLoc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSUrlStringGet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        length: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSUrlSchemeGet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSUrlSchemeSet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        value: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSUrlUserGet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSUrlUserSet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        value: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSUrlPasswordGet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSUrlPasswordSet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        value: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSUrlHostGet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSUrlHostSet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        value: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSUrlPortGet(bufp: TSMBuffer, offset: TSMLoc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSUrlPortSet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        port: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSUrlPathGet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSUrlPathSet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        value: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSUrlFtpTypeGet(bufp: TSMBuffer, offset: TSMLoc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSUrlFtpTypeSet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        type_: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSUrlHttpParamsGet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSUrlHttpParamsSet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        value: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSUrlHttpQueryGet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSUrlHttpQuerySet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        value: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSUrlHttpFragmentGet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSUrlHttpFragmentSet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        value: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSStringPercentEncode(
        str: *const ::std::os::raw::c_char,
        str_len: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_char,
        dst_size: usize,
        length: *mut usize,
        map: *const ::std::os::raw::c_uchar,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSUrlPercentEncode(
        bufp: TSMBuffer,
        offset: TSMLoc,
        dst: *mut ::std::os::raw::c_char,
        dst_size: usize,
        length: *mut usize,
        map: *const ::std::os::raw::c_uchar,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSStringPercentDecode(
        str: *const ::std::os::raw::c_char,
        str_len: usize,
        dst: *mut ::std::os::raw::c_char,
        dst_size: usize,
        length: *mut usize,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeParserCreate() -> TSMimeParser;
}
extern "C" {
    pub fn TSMimeParserClear(parser: TSMimeParser);
}
extern "C" {
    pub fn TSMimeParserDestroy(parser: TSMimeParser);
}
extern "C" {
    pub fn TSMimeHdrCreate(bufp: TSMBuffer, locp: *mut TSMLoc) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrDestroy(bufp: TSMBuffer, offset: TSMLoc) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrClone(
        dest_bufp: TSMBuffer,
        src_bufp: TSMBuffer,
        src_hdr: TSMLoc,
        locp: *mut TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrCopy(
        dest_bufp: TSMBuffer,
        dest_offset: TSMLoc,
        src_bufp: TSMBuffer,
        src_offset: TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrPrint(bufp: TSMBuffer, offset: TSMLoc, iobufp: TSIOBuffer);
}
extern "C" {
    pub fn TSMimeHdrParse(
        parser: TSMimeParser,
        bufp: TSMBuffer,
        offset: TSMLoc,
        start: *mut *const ::std::os::raw::c_char,
        end: *const ::std::os::raw::c_char,
    ) -> TSParseResult;
}
extern "C" {
    pub fn TSMimeHdrLengthGet(bufp: TSMBuffer, offset: TSMLoc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSMimeHdrFieldsClear(bufp: TSMBuffer, offset: TSMLoc) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldsCount(bufp: TSMBuffer, offset: TSMLoc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSMimeHdrFieldGet(bufp: TSMBuffer, hdr: TSMLoc, idx: ::std::os::raw::c_int) -> TSMLoc;
}
extern "C" {
    pub fn TSMimeHdrFieldFind(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        name: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> TSMLoc;
}
extern "C" {
    pub fn TSMimeHdrFieldAppend(bufp: TSMBuffer, hdr: TSMLoc, field: TSMLoc) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldRemove(bufp: TSMBuffer, hdr: TSMLoc, field: TSMLoc) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldCreate(bufp: TSMBuffer, hdr: TSMLoc, locp: *mut TSMLoc) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldCreateNamed(
        bufp: TSMBuffer,
        mh_mloc: TSMLoc,
        name: *const ::std::os::raw::c_char,
        name_len: ::std::os::raw::c_int,
        locp: *mut TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldDestroy(bufp: TSMBuffer, hdr: TSMLoc, field: TSMLoc) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldClone(
        dest_bufp: TSMBuffer,
        dest_hdr: TSMLoc,
        src_bufp: TSMBuffer,
        src_hdr: TSMLoc,
        src_field: TSMLoc,
        locp: *mut TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldCopy(
        dest_bufp: TSMBuffer,
        dest_hdr: TSMLoc,
        dest_field: TSMLoc,
        src_bufp: TSMBuffer,
        src_hdr: TSMLoc,
        src_field: TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldCopyValues(
        dest_bufp: TSMBuffer,
        dest_hdr: TSMLoc,
        dest_field: TSMLoc,
        src_bufp: TSMBuffer,
        src_hdr: TSMLoc,
        src_field: TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldNext(bufp: TSMBuffer, hdr: TSMLoc, field: TSMLoc) -> TSMLoc;
}
extern "C" {
    pub fn TSMimeHdrFieldNextDup(bufp: TSMBuffer, hdr: TSMLoc, field: TSMLoc) -> TSMLoc;
}
extern "C" {
    pub fn TSMimeHdrFieldLengthGet(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        field: TSMLoc,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSMimeHdrFieldNameGet(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        field: TSMLoc,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSMimeHdrFieldNameSet(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        field: TSMLoc,
        name: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldValuesClear(bufp: TSMBuffer, hdr: TSMLoc, field: TSMLoc) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldValuesCount(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        field: TSMLoc,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSMimeHdrFieldValueStringGet(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        field: TSMLoc,
        idx: ::std::os::raw::c_int,
        value_len_ptr: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSMimeHdrFieldValueIntGet(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        field: TSMLoc,
        idx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSMimeHdrFieldValueInt64Get(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        field: TSMLoc,
        idx: ::std::os::raw::c_int,
    ) -> i64;
}
extern "C" {
    pub fn TSMimeHdrFieldValueUintGet(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        field: TSMLoc,
        idx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn TSMimeHdrFieldValueDateGet(bufp: TSMBuffer, hdr: TSMLoc, field: TSMLoc) -> time_t;
}
extern "C" {
    pub fn TSMimeHdrFieldValueStringSet(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        field: TSMLoc,
        idx: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldValueIntSet(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        field: TSMLoc,
        idx: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldValueInt64Set(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        field: TSMLoc,
        idx: ::std::os::raw::c_int,
        value: i64,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldValueUintSet(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        field: TSMLoc,
        idx: ::std::os::raw::c_int,
        value: ::std::os::raw::c_uint,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldValueDateSet(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        field: TSMLoc,
        value: time_t,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldValueAppend(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        field: TSMLoc,
        idx: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldValueStringInsert(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        field: TSMLoc,
        idx: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldValueIntInsert(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        field: TSMLoc,
        idx: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldValueUintInsert(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        field: TSMLoc,
        idx: ::std::os::raw::c_int,
        value: ::std::os::raw::c_uint,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldValueDateInsert(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        field: TSMLoc,
        value: time_t,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMimeHdrFieldValueDelete(
        bufp: TSMBuffer,
        hdr: TSMLoc,
        field: TSMLoc,
        idx: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpParserCreate() -> TSHttpParser;
}
extern "C" {
    pub fn TSHttpParserClear(parser: TSHttpParser);
}
extern "C" {
    pub fn TSHttpParserDestroy(parser: TSHttpParser);
}
extern "C" {
    pub fn TSHttpHdrParseReq(
        parser: TSHttpParser,
        bufp: TSMBuffer,
        offset: TSMLoc,
        start: *mut *const ::std::os::raw::c_char,
        end: *const ::std::os::raw::c_char,
    ) -> TSParseResult;
}
extern "C" {
    pub fn TSHttpHdrParseResp(
        parser: TSHttpParser,
        bufp: TSMBuffer,
        offset: TSMLoc,
        start: *mut *const ::std::os::raw::c_char,
        end: *const ::std::os::raw::c_char,
    ) -> TSParseResult;
}
extern "C" {
    pub fn TSHttpHdrCreate(bufp: TSMBuffer) -> TSMLoc;
}
extern "C" {
    pub fn TSHttpHdrDestroy(bufp: TSMBuffer, offset: TSMLoc);
}
extern "C" {
    pub fn TSHttpHdrClone(
        dest_bufp: TSMBuffer,
        src_bufp: TSMBuffer,
        src_hdr: TSMLoc,
        locp: *mut TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpHdrCopy(
        dest_bufp: TSMBuffer,
        dest_offset: TSMLoc,
        src_bufp: TSMBuffer,
        src_offset: TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpHdrPrint(bufp: TSMBuffer, offset: TSMLoc, iobufp: TSIOBuffer);
}
extern "C" {
    pub fn TSHttpHdrLengthGet(bufp: TSMBuffer, offset: TSMLoc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpHdrTypeGet(bufp: TSMBuffer, offset: TSMLoc) -> TSHttpType;
}
extern "C" {
    pub fn TSHttpHdrTypeSet(bufp: TSMBuffer, offset: TSMLoc, type_: TSHttpType) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpHdrVersionGet(bufp: TSMBuffer, offset: TSMLoc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpHdrVersionSet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        ver: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpHdrMethodGet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSHttpHdrMethodSet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        value: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpHdrHostGet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSHttpHdrUrlGet(bufp: TSMBuffer, offset: TSMLoc, locp: *mut TSMLoc) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpHdrUrlSet(bufp: TSMBuffer, offset: TSMLoc, url: TSMLoc) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpHdrStatusGet(bufp: TSMBuffer, offset: TSMLoc) -> TSHttpStatus;
}
extern "C" {
    pub fn TSHttpHdrStatusSet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        status: TSHttpStatus,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpHdrReasonGet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSHttpHdrReasonSet(
        bufp: TSMBuffer,
        offset: TSMLoc,
        value: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpHdrReasonLookup(status: TSHttpStatus) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSThreadCreate(func: TSThreadFunc, data: *mut ::std::os::raw::c_void) -> TSThread;
}
extern "C" {
    pub fn TSThreadInit() -> TSThread;
}
extern "C" {
    pub fn TSThreadDestroy(thread: TSThread);
}
extern "C" {
    pub fn TSThreadSelf() -> TSThread;
}
extern "C" {
    pub fn TSMutexCreate() -> TSMutex;
}
extern "C" {
    pub fn TSMutexDestroy(mutexp: TSMutex);
}
extern "C" {
    pub fn TSMutexLock(mutexp: TSMutex);
}
extern "C" {
    pub fn TSMutexLockTry(mutexp: TSMutex) -> TSReturnCode;
}
extern "C" {
    pub fn TSMutexUnlock(mutexp: TSMutex);
}
extern "C" {
    pub fn TSCacheKeyCreate() -> TSCacheKey;
}
extern "C" {
    pub fn TSCacheKeyDigestSet(
        key: TSCacheKey,
        input: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSCacheKeyDigestFromUrlSet(key: TSCacheKey, url: TSMLoc) -> TSReturnCode;
}
extern "C" {
    pub fn TSCacheKeyHostNameSet(
        key: TSCacheKey,
        hostname: *const ::std::os::raw::c_char,
        host_len: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSCacheKeyPinnedSet(key: TSCacheKey, pin_in_cache: time_t) -> TSReturnCode;
}
extern "C" {
    pub fn TSCacheKeyDestroy(key: TSCacheKey) -> TSReturnCode;
}
extern "C" {
    pub fn TSCacheUrlSet(
        txnp: TSHttpTxn,
        url: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSConfigSet(
        id: ::std::os::raw::c_uint,
        data: *mut ::std::os::raw::c_void,
        funcp: TSConfigDestroyFunc,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn TSConfigGet(id: ::std::os::raw::c_uint) -> TSConfig;
}
extern "C" {
    pub fn TSConfigRelease(id: ::std::os::raw::c_uint, configp: TSConfig);
}
extern "C" {
    pub fn TSConfigDataGet(configp: TSConfig) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TSMgmtUpdateRegister(contp: TSCont, plugin_name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn TSMgmtIntGet(
        var_name: *const ::std::os::raw::c_char,
        result: *mut TSMgmtInt,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMgmtCounterGet(
        var_name: *const ::std::os::raw::c_char,
        result: *mut TSMgmtCounter,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMgmtFloatGet(
        var_name: *const ::std::os::raw::c_char,
        result: *mut TSMgmtFloat,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMgmtStringGet(
        var_name: *const ::std::os::raw::c_char,
        result: *mut TSMgmtString,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMgmtSourceGet(
        var_name: *const ::std::os::raw::c_char,
        source: *mut TSMgmtSource,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSContCreate(funcp: TSEventFunc, mutexp: TSMutex) -> TSCont;
}
extern "C" {
    pub fn TSContDestroy(contp: TSCont);
}
extern "C" {
    pub fn TSContDataSet(contp: TSCont, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn TSContDataGet(contp: TSCont) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TSContSchedule(contp: TSCont, timeout: TSHRTime, tp: TSThreadPool) -> TSAction;
}
extern "C" {
    pub fn TSContScheduleEvery(contp: TSCont, every: TSHRTime, tp: TSThreadPool) -> TSAction;
}
extern "C" {
    pub fn TSHttpSchedule(contp: TSCont, txnp: TSHttpTxn, timeout: TSHRTime) -> TSAction;
}
extern "C" {
    pub fn TSContCall(
        contp: TSCont,
        event: TSEvent,
        edata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSContMutexGet(contp: TSCont) -> TSMutex;
}
extern "C" {
    pub fn TSLifecycleHookAdd(id: TSLifecycleHookID, contp: TSCont);
}
extern "C" {
    pub fn TSHttpHookAdd(id: TSHttpHookID, contp: TSCont);
}
extern "C" {
    pub fn TSHttpSsnHookAdd(ssnp: TSHttpSsn, id: TSHttpHookID, contp: TSCont);
}
extern "C" {
    pub fn TSHttpSsnReenable(ssnp: TSHttpSsn, event: TSEvent);
}
extern "C" {
    pub fn TSHttpSsnTransactionCount(ssnp: TSHttpSsn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSVConnReenable(sslvcp: TSVConn);
}
extern "C" {
    pub fn TSVConnTunnel(sslp: TSVConn) -> TSReturnCode;
}
extern "C" {
    pub fn TSVConnSSLConnectionGet(sslp: TSVConn) -> TSSslConnection;
}
extern "C" {
    pub fn TSSslContextFindByName(name: *const ::std::os::raw::c_char) -> TSSslContext;
}
extern "C" {
    pub fn TSSslContextFindByAddr(arg1: *const sockaddr) -> TSSslContext;
}
extern "C" {
    pub fn TSSslServerContextCreate() -> TSSslContext;
}
extern "C" {
    pub fn TSSslContextDestroy(ctx: TSSslContext);
}
extern "C" {
    pub fn TSUnregisterProtocol(
        protoset: TSNextProtocolSet,
        protocol: *const ::std::os::raw::c_char,
    ) -> TSNextProtocolSet;
}
extern "C" {
    pub fn TSAcceptorGet(sslp: TSVConn) -> TSAcceptor;
}
extern "C" {
    pub fn TSGetcloneProtoSet(tna: TSAcceptor) -> TSNextProtocolSet;
}
extern "C" {
    pub fn TSAcceptorGetbyID(ID: ::std::os::raw::c_int) -> TSAcceptor;
}
extern "C" {
    pub fn TSRegisterProtocolSet(sslp: TSVConn, ps: TSNextProtocolSet);
}
extern "C" {
    pub fn TSAcceptorCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSAcceptorIDGet(acceptor: TSAcceptor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSVConnIsSsl(sslp: TSVConn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpTxnHookAdd(txnp: TSHttpTxn, id: TSHttpHookID, contp: TSCont);
}
extern "C" {
    pub fn TSHttpTxnSsnGet(txnp: TSHttpTxn) -> TSHttpSsn;
}
extern "C" {
    pub fn TSHttpTxnClientReqGet(
        txnp: TSHttpTxn,
        bufp: *mut TSMBuffer,
        offset: *mut TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnClientRespGet(
        txnp: TSHttpTxn,
        bufp: *mut TSMBuffer,
        offset: *mut TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnServerReqGet(
        txnp: TSHttpTxn,
        bufp: *mut TSMBuffer,
        offset: *mut TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnServerRespGet(
        txnp: TSHttpTxn,
        bufp: *mut TSMBuffer,
        offset: *mut TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnCachedReqGet(
        txnp: TSHttpTxn,
        bufp: *mut TSMBuffer,
        offset: *mut TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnCachedRespGet(
        txnp: TSHttpTxn,
        bufp: *mut TSMBuffer,
        offset: *mut TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnPristineUrlGet(
        txnp: TSHttpTxn,
        bufp: *mut TSMBuffer,
        url_loc: *mut TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnEffectiveUrlStringGet(
        txnp: TSHttpTxn,
        length: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSHttpTxnRespCacheableSet(txnp: TSHttpTxn, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TSHttpTxnReqCacheableSet(txnp: TSHttpTxn, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TSHttpTxnServerRespNoStoreSet(
        txnp: TSHttpTxn,
        flag: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSFetchPageRespGet(
        txnp: TSHttpTxn,
        bufp: *mut TSMBuffer,
        offset: *mut TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSFetchRespGet(
        txnp: TSHttpTxn,
        length: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSHttpTxnCacheLookupStatusGet(
        txnp: TSHttpTxn,
        lookup_status: *mut ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnTransformRespGet(
        txnp: TSHttpTxn,
        bufp: *mut TSMBuffer,
        offset: *mut TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnClientIncomingPortSet(txnp: TSHttpTxn, port: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TSHttpSsnSSLConnectionGet(ssnp: TSHttpSsn) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TSHttpTxnClientAddrGet(txnp: TSHttpTxn) -> *const sockaddr;
}
extern "C" {
    pub fn TSHttpTxnIncomingAddrGet(txnp: TSHttpTxn) -> *const sockaddr;
}
extern "C" {
    pub fn TSHttpTxnOutgoingAddrGet(txnp: TSHttpTxn) -> *const sockaddr;
}
extern "C" {
    pub fn TSHttpTxnServerAddrGet(txnp: TSHttpTxn) -> *const sockaddr;
}
extern "C" {
    pub fn TSHttpTxnServerAddrSet(txnp: TSHttpTxn, addr: *const sockaddr) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnNextHopAddrGet(txnp: TSHttpTxn) -> *const sockaddr;
}
extern "C" {
    pub fn TSHttpTxnClientFdGet(txnp: TSHttpTxn, fdp: *mut ::std::os::raw::c_int) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnOutgoingAddrSet(txnp: TSHttpTxn, addr: *const sockaddr) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnOutgoingTransparencySet(
        txnp: TSHttpTxn,
        flag: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnServerFdGet(txnp: TSHttpTxn, fdp: *mut ::std::os::raw::c_int) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpSsnClientAddrGet(ssnp: TSHttpSsn) -> *const sockaddr;
}
extern "C" {
    pub fn TSHttpSsnIncomingAddrGet(ssnp: TSHttpSsn) -> *const sockaddr;
}
extern "C" {
    pub fn TSHttpSsnClientFdGet(ssnp: TSHttpSsn, fdp: *mut ::std::os::raw::c_int) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnClientPacketMarkSet(
        txnp: TSHttpTxn,
        mark: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnServerPacketMarkSet(
        txnp: TSHttpTxn,
        mark: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnClientPacketTosSet(txnp: TSHttpTxn, tos: ::std::os::raw::c_int)
        -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnServerPacketTosSet(txnp: TSHttpTxn, tos: ::std::os::raw::c_int)
        -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnClientPacketDscpSet(
        txnp: TSHttpTxn,
        dscp: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnServerPacketDscpSet(
        txnp: TSHttpTxn,
        dscp: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnErrorBodySet(
        txnp: TSHttpTxn,
        buf: *mut ::std::os::raw::c_char,
        buflength: usize,
        mimetype: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn TSHttpTxnParentProxyGet(
        txnp: TSHttpTxn,
        hostname: *mut *const ::std::os::raw::c_char,
        port: *mut ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnParentProxySet(
        txnp: TSHttpTxn,
        hostname: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TSHttpTxnParentSelectionUrlGet(
        txnp: TSHttpTxn,
        bufp: TSMBuffer,
        obj: TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnParentSelectionUrlSet(
        txnp: TSHttpTxn,
        bufp: TSMBuffer,
        obj: TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnUntransformedRespCache(txnp: TSHttpTxn, on: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TSHttpTxnTransformedRespCache(txnp: TSHttpTxn, on: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TSHttpTxnReenable(txnp: TSHttpTxn, event: TSEvent);
}
extern "C" {
    pub fn TSHttpCacheReenable(
        txnp: TSCacheTxn,
        event: TSEvent,
        data: *const ::std::os::raw::c_void,
        size: u64,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnArgSet(
        txnp: TSHttpTxn,
        arg_idx: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn TSHttpTxnArgGet(
        txnp: TSHttpTxn,
        arg_idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TSHttpSsnArgSet(
        ssnp: TSHttpSsn,
        arg_idx: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn TSHttpSsnArgGet(
        ssnp: TSHttpSsn,
        arg_idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TSHttpArgIndexReserve(
        name: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
        arg_idx: *mut ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpArgIndexNameLookup(
        name: *const ::std::os::raw::c_char,
        arg_idx: *mut ::std::os::raw::c_int,
        description: *mut *const ::std::os::raw::c_char,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpArgIndexLookup(
        arg_idx: ::std::os::raw::c_int,
        name: *mut *const ::std::os::raw::c_char,
        description: *mut *const ::std::os::raw::c_char,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnSetHttpRetStatus(txnp: TSHttpTxn, http_retstatus: TSHttpStatus);
}
extern "C" {
    pub fn TSHttpTxnActiveTimeoutSet(txnp: TSHttpTxn, timeout: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TSHttpTxnConnectTimeoutSet(txnp: TSHttpTxn, timeout: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TSHttpTxnDNSTimeoutSet(txnp: TSHttpTxn, timeout: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TSHttpTxnNoActivityTimeoutSet(txnp: TSHttpTxn, timeout: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TSHttpTxnServerStateGet(txnp: TSHttpTxn) -> TSServerState;
}
extern "C" {
    pub fn TSHttpTxnDebugSet(txnp: TSHttpTxn, on: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TSHttpTxnDebugGet(txnp: TSHttpTxn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpSsnDebugSet(ssnp: TSHttpSsn, on: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TSHttpSsnDebugGet(
        ssnp: TSHttpSsn,
        on: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpTxnIntercept(contp: TSCont, txnp: TSHttpTxn);
}
extern "C" {
    pub fn TSHttpTxnServerIntercept(contp: TSCont, txnp: TSHttpTxn);
}
extern "C" {
    pub fn TSHttpConnectWithPluginId(
        addr: *const sockaddr,
        tag: *const ::std::os::raw::c_char,
        id: i64,
    ) -> TSVConn;
}
extern "C" {
    pub fn TSHttpConnect(addr: *const sockaddr) -> TSVConn;
}
extern "C" {
    pub fn TSHttpConnectTransparent(
        client_addr: *const sockaddr,
        server_addr: *const sockaddr,
    ) -> TSVConn;
}
extern "C" {
    pub fn TSFetchUrl(
        request: *const ::std::os::raw::c_char,
        request_len: ::std::os::raw::c_int,
        addr: *const sockaddr,
        contp: TSCont,
        callback_options: TSFetchWakeUpOptions,
        event: TSFetchEvent,
    );
}
extern "C" {
    pub fn TSFetchPages(params: *mut TSFetchUrlParams_t);
}
extern "C" {
    pub fn TSHttpTxnIsInternal(txnp: TSHttpTxn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpSsnIsInternal(ssnp: TSHttpSsn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpAltInfoClientReqGet(
        infop: TSHttpAltInfo,
        bufp: *mut TSMBuffer,
        offset: *mut TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpAltInfoCachedReqGet(
        infop: TSHttpAltInfo,
        bufp: *mut TSMBuffer,
        offset: *mut TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpAltInfoCachedRespGet(
        infop: TSHttpAltInfo,
        bufp: *mut TSMBuffer,
        offset: *mut TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpAltInfoQualitySet(infop: TSHttpAltInfo, quality: f32);
}
extern "C" {
    pub fn TSActionCancel(actionp: TSAction);
}
extern "C" {
    pub fn TSActionDone(actionp: TSAction) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSVConnReadVIOGet(connp: TSVConn) -> TSVIO;
}
extern "C" {
    pub fn TSVConnWriteVIOGet(connp: TSVConn) -> TSVIO;
}
extern "C" {
    pub fn TSVConnClosedGet(connp: TSVConn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSVConnRead(connp: TSVConn, contp: TSCont, bufp: TSIOBuffer, nbytes: i64) -> TSVIO;
}
extern "C" {
    pub fn TSVConnWrite(
        connp: TSVConn,
        contp: TSCont,
        readerp: TSIOBufferReader,
        nbytes: i64,
    ) -> TSVIO;
}
extern "C" {
    pub fn TSVConnClose(connp: TSVConn);
}
extern "C" {
    pub fn TSVConnAbort(connp: TSVConn, error: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TSVConnShutdown(
        connp: TSVConn,
        read: ::std::os::raw::c_int,
        write: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TSVConnCacheObjectSizeGet(connp: TSVConn) -> i64;
}
extern "C" {
    pub fn TSTransformCreate(event_funcp: TSEventFunc, txnp: TSHttpTxn) -> TSVConn;
}
extern "C" {
    pub fn TSTransformOutputVConnGet(connp: TSVConn) -> TSVConn;
}
extern "C" {
    pub fn TSNetVConnRemoteAddrGet(vc: TSVConn) -> *const sockaddr;
}
extern "C" {
    pub fn TSNetConnect(contp: TSCont, to: *const sockaddr) -> TSAction;
}
extern "C" {
    pub fn TSNetAccept(
        contp: TSCont,
        port: ::std::os::raw::c_int,
        domain: ::std::os::raw::c_int,
        accept_threads: ::std::os::raw::c_int,
    ) -> TSAction;
}
extern "C" {
    pub fn TSNetAcceptNamedProtocol(
        contp: TSCont,
        protocol: *const ::std::os::raw::c_char,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSPortDescriptorParse(descriptor: *const ::std::os::raw::c_char) -> TSPortDescriptor;
}
extern "C" {
    pub fn TSPortDescriptorAccept(arg1: TSPortDescriptor, arg2: TSCont) -> TSReturnCode;
}
extern "C" {
    pub fn TSHostLookup(
        contp: TSCont,
        hostname: *const ::std::os::raw::c_char,
        namelen: usize,
    ) -> TSAction;
}
extern "C" {
    pub fn TSHostLookupResultAddrGet(lookup_result: TSHostLookupResult) -> *const sockaddr;
}
extern "C" {
    pub fn TSCacheRead(contp: TSCont, key: TSCacheKey) -> TSAction;
}
extern "C" {
    pub fn TSCacheWrite(contp: TSCont, key: TSCacheKey) -> TSAction;
}
extern "C" {
    pub fn TSCacheRemove(contp: TSCont, key: TSCacheKey) -> TSAction;
}
extern "C" {
    pub fn TSCacheReady(is_ready: *mut ::std::os::raw::c_int) -> TSReturnCode;
}
extern "C" {
    pub fn TSCacheScan(
        contp: TSCont,
        key: TSCacheKey,
        KB_per_second: ::std::os::raw::c_int,
    ) -> TSAction;
}
extern "C" {
    pub fn TSVIOReenable(viop: TSVIO);
}
extern "C" {
    pub fn TSVIOBufferGet(viop: TSVIO) -> TSIOBuffer;
}
extern "C" {
    pub fn TSVIOReaderGet(viop: TSVIO) -> TSIOBufferReader;
}
extern "C" {
    pub fn TSVIONBytesGet(viop: TSVIO) -> i64;
}
extern "C" {
    pub fn TSVIONBytesSet(viop: TSVIO, nbytes: i64);
}
extern "C" {
    pub fn TSVIONDoneGet(viop: TSVIO) -> i64;
}
extern "C" {
    pub fn TSVIONDoneSet(viop: TSVIO, ndone: i64);
}
extern "C" {
    pub fn TSVIONTodoGet(viop: TSVIO) -> i64;
}
extern "C" {
    pub fn TSVIOMutexGet(viop: TSVIO) -> TSMutex;
}
extern "C" {
    pub fn TSVIOContGet(viop: TSVIO) -> TSCont;
}
extern "C" {
    pub fn TSVIOVConnGet(viop: TSVIO) -> TSVConn;
}
extern "C" {
    pub fn TSIOBufferCreate() -> TSIOBuffer;
}
extern "C" {
    pub fn TSIOBufferSizedCreate(index: TSIOBufferSizeIndex) -> TSIOBuffer;
}
extern "C" {
    pub fn TSIOBufferWaterMarkGet(bufp: TSIOBuffer) -> i64;
}
extern "C" {
    pub fn TSIOBufferWaterMarkSet(bufp: TSIOBuffer, water_mark: i64);
}
extern "C" {
    pub fn TSIOBufferDestroy(bufp: TSIOBuffer);
}
extern "C" {
    pub fn TSIOBufferStart(bufp: TSIOBuffer) -> TSIOBufferBlock;
}
extern "C" {
    pub fn TSIOBufferCopy(
        bufp: TSIOBuffer,
        readerp: TSIOBufferReader,
        length: i64,
        offset: i64,
    ) -> i64;
}
extern "C" {
    pub fn TSIOBufferWrite(
        bufp: TSIOBuffer,
        buf: *const ::std::os::raw::c_void,
        length: i64,
    ) -> i64;
}
extern "C" {
    pub fn TSIOBufferProduce(bufp: TSIOBuffer, nbytes: i64);
}
extern "C" {
    pub fn TSIOBufferBlockNext(blockp: TSIOBufferBlock) -> TSIOBufferBlock;
}
extern "C" {
    pub fn TSIOBufferBlockReadStart(
        blockp: TSIOBufferBlock,
        readerp: TSIOBufferReader,
        avail: *mut i64,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSIOBufferBlockReadAvail(blockp: TSIOBufferBlock, readerp: TSIOBufferReader) -> i64;
}
extern "C" {
    pub fn TSIOBufferBlockWriteStart(
        blockp: TSIOBufferBlock,
        avail: *mut i64,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSIOBufferBlockWriteAvail(blockp: TSIOBufferBlock) -> i64;
}
extern "C" {
    pub fn TSIOBufferReaderAlloc(bufp: TSIOBuffer) -> TSIOBufferReader;
}
extern "C" {
    pub fn TSIOBufferReaderClone(readerp: TSIOBufferReader) -> TSIOBufferReader;
}
extern "C" {
    pub fn TSIOBufferReaderFree(readerp: TSIOBufferReader);
}
extern "C" {
    pub fn TSIOBufferReaderStart(readerp: TSIOBufferReader) -> TSIOBufferBlock;
}
extern "C" {
    pub fn TSIOBufferReaderConsume(readerp: TSIOBufferReader, nbytes: i64);
}
extern "C" {
    pub fn TSIOBufferReaderAvail(readerp: TSIOBufferReader) -> i64;
}
extern "C" {
    pub fn TSNetVConnLocalAddrGet(vc: TSVConn) -> *const sockaddr;
}
pub const TSStatPersistence_TS_STAT_PERSISTENT: TSStatPersistence = 1;
pub const TSStatPersistence_TS_STAT_NON_PERSISTENT: TSStatPersistence = 2;
pub type TSStatPersistence = u32;
pub const TSStatSync_TS_STAT_SYNC_SUM: TSStatSync = 0;
pub const TSStatSync_TS_STAT_SYNC_COUNT: TSStatSync = 1;
pub const TSStatSync_TS_STAT_SYNC_AVG: TSStatSync = 2;
pub const TSStatSync_TS_STAT_SYNC_TIMEAVG: TSStatSync = 3;
pub type TSStatSync = u32;
extern "C" {
    pub fn TSMgmtStringCreate(
        rec_type: TSRecordType,
        name: *const ::std::os::raw::c_char,
        data_default: TSMgmtString,
        update_type: TSRecordUpdateType,
        check_type: TSRecordCheckType,
        check_regex: *const ::std::os::raw::c_char,
        access_type: TSRecordAccessType,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSMgmtIntCreate(
        rec_type: TSRecordType,
        name: *const ::std::os::raw::c_char,
        data_default: TSMgmtInt,
        update_type: TSRecordUpdateType,
        check_type: TSRecordCheckType,
        check_regex: *const ::std::os::raw::c_char,
        access_type: TSRecordAccessType,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSStatCreate(
        the_name: *const ::std::os::raw::c_char,
        the_type: TSRecordDataType,
        persist: TSStatPersistence,
        sync: TSStatSync,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSStatIntIncrement(the_stat: ::std::os::raw::c_int, amount: TSMgmtInt);
}
extern "C" {
    pub fn TSStatIntDecrement(the_stat: ::std::os::raw::c_int, amount: TSMgmtInt);
}
extern "C" {
    pub fn TSStatIntGet(the_stat: ::std::os::raw::c_int) -> TSMgmtInt;
}
extern "C" {
    pub fn TSStatIntSet(the_stat: ::std::os::raw::c_int, value: TSMgmtInt);
}
extern "C" {
    pub fn TSStatFindName(
        name: *const ::std::os::raw::c_char,
        idp: *mut ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSIsDebugTagSet(t: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSDebug(
        tag: *const ::std::os::raw::c_char,
        format_str: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn TSDebugSpecific(
        debug_flag: ::std::os::raw::c_int,
        tag: *const ::std::os::raw::c_char,
        format_str: *const ::std::os::raw::c_char,
        ...
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_textlogobject {
    _unused: [u8; 0],
}
pub type TSTextLogObject = *mut tsapi_textlogobject;
pub type TSRecordDumpCb = ::std::option::Option<
    unsafe extern "C" fn(
        rec_type: TSRecordType,
        edata: *mut ::std::os::raw::c_void,
        registered: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        data_type: TSRecordDataType,
        datum: *mut TSRecordData,
    ),
>;
extern "C" {
    pub fn TSRecordDump(
        rec_type: ::std::os::raw::c_int,
        callback: TSRecordDumpCb,
        edata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn TSTextLogObjectCreate(
        filename: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
        new_log_obj: *mut TSTextLogObject,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSTextLogObjectWrite(
        the_object: TSTextLogObject,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSTextLogObjectFlush(the_object: TSTextLogObject);
}
extern "C" {
    pub fn TSTextLogObjectDestroy(the_object: TSTextLogObject) -> TSReturnCode;
}
extern "C" {
    pub fn TSTextLogObjectHeaderSet(
        the_object: TSTextLogObject,
        header: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn TSTextLogObjectRollingEnabledSet(
        the_object: TSTextLogObject,
        rolling_enabled: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSTextLogObjectRollingIntervalSecSet(
        the_object: TSTextLogObject,
        rolling_interval_sec: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TSTextLogObjectRollingOffsetHrSet(
        the_object: TSTextLogObject,
        rolling_offset_hr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TSTextLogObjectRollingSizeMbSet(
        the_object: TSTextLogObject,
        rolling_size_mb: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TSAIORead(
        fd: ::std::os::raw::c_int,
        offset: off_t,
        buf: *mut ::std::os::raw::c_char,
        buffSize: usize,
        contp: TSCont,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSAIOBufGet(data: TSAIOCallback) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSAIONBytesGet(data: TSAIOCallback) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSAIOWrite(
        fd: ::std::os::raw::c_int,
        offset: off_t,
        buf: *mut ::std::os::raw::c_char,
        bufSize: usize,
        contp: TSCont,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSAIOThreadNumSet(thread_num: ::std::os::raw::c_int) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnAborted(txnp: TSHttpTxn) -> TSReturnCode;
}
extern "C" {
    pub fn TSVConnCreate(event_funcp: TSEventFunc, mutexp: TSMutex) -> TSVConn;
}
extern "C" {
    pub fn TSVConnFdCreate(fd: ::std::os::raw::c_int) -> TSVConn;
}
extern "C" {
    pub fn TSHttpTxnClientReqHdrBytesGet(txnp: TSHttpTxn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpTxnClientReqBodyBytesGet(txnp: TSHttpTxn) -> i64;
}
extern "C" {
    pub fn TSHttpTxnServerReqHdrBytesGet(txnp: TSHttpTxn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpTxnServerReqBodyBytesGet(txnp: TSHttpTxn) -> i64;
}
extern "C" {
    pub fn TSHttpTxnPushedRespHdrBytesGet(txnp: TSHttpTxn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpTxnPushedRespBodyBytesGet(txnp: TSHttpTxn) -> i64;
}
extern "C" {
    pub fn TSHttpTxnServerRespHdrBytesGet(txnp: TSHttpTxn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpTxnServerRespBodyBytesGet(txnp: TSHttpTxn) -> i64;
}
extern "C" {
    pub fn TSHttpTxnClientRespHdrBytesGet(txnp: TSHttpTxn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpTxnClientRespBodyBytesGet(txnp: TSHttpTxn) -> i64;
}
extern "C" {
    pub fn TSVConnInactivityTimeoutSet(connp: TSVConn, timeout: TSHRTime);
}
extern "C" {
    pub fn TSVConnInactivityTimeoutCancel(connp: TSVConn);
}
extern "C" {
    pub fn TSVConnActiveTimeoutSet(connp: TSVConn, timeout: TSHRTime);
}
extern "C" {
    pub fn TSVConnActiveTimeoutCancel(connp: TSVConn);
}
extern "C" {
    pub fn TSSkipRemappingSet(txnp: TSHttpTxn, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TSHttpTxnConfigIntSet(
        txnp: TSHttpTxn,
        conf: TSOverridableConfigKey,
        value: TSMgmtInt,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnConfigIntGet(
        txnp: TSHttpTxn,
        conf: TSOverridableConfigKey,
        value: *mut TSMgmtInt,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnConfigFloatSet(
        txnp: TSHttpTxn,
        conf: TSOverridableConfigKey,
        value: TSMgmtFloat,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnConfigFloatGet(
        txnp: TSHttpTxn,
        conf: TSOverridableConfigKey,
        value: *mut TSMgmtFloat,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnConfigStringSet(
        txnp: TSHttpTxn,
        conf: TSOverridableConfigKey,
        value: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnConfigStringGet(
        txnp: TSHttpTxn,
        conf: TSOverridableConfigKey,
        value: *mut *const ::std::os::raw::c_char,
        length: *mut ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnConfigFind(
        name: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
        conf: *mut TSOverridableConfigKey,
        type_: *mut TSRecordDataType,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnFollowRedirect(txnp: TSHttpTxn, on: ::std::os::raw::c_int) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnRedirectUrlSet(
        txnp: TSHttpTxn,
        url: *const ::std::os::raw::c_char,
        url_len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TSRedirectUrlSet(
        txnp: TSHttpTxn,
        url: *const ::std::os::raw::c_char,
        url_len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TSHttpTxnRedirectUrlGet(
        txnp: TSHttpTxn,
        url_len_ptr: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSRedirectUrlGet(
        txnp: TSHttpTxn,
        url_len_ptr: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSHttpTxnRedirectRetries(txnp: TSHttpTxn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpCurrentClientConnectionsGet() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpCurrentActiveClientConnectionsGet() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpCurrentIdleClientConnectionsGet() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpCurrentCacheConnectionsGet() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpCurrentServerConnectionsGet() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpTxnCachedRespModifiableGet(
        txnp: TSHttpTxn,
        bufp: *mut TSMBuffer,
        offset: *mut TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnCacheLookupStatusSet(
        txnp: TSHttpTxn,
        cachelookup: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnCacheLookupUrlGet(
        txnp: TSHttpTxn,
        bufp: TSMBuffer,
        obj: TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnCacheLookupUrlSet(
        txnp: TSHttpTxn,
        bufp: TSMBuffer,
        obj: TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnPrivateSessionSet(
        txnp: TSHttpTxn,
        private_session: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnBackgroundFillStarted(txnp: TSHttpTxn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpTxnIsWebsocket(txnp: TSHttpTxn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpTxnIdGet(txnp: TSHttpTxn) -> u64;
}
extern "C" {
    pub fn TSBase64Decode(
        str: *const ::std::os::raw::c_char,
        str_len: usize,
        dst: *mut ::std::os::raw::c_uchar,
        dst_size: usize,
        length: *mut usize,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSBase64Encode(
        str: *const ::std::os::raw::c_char,
        str_len: usize,
        dst: *mut ::std::os::raw::c_char,
        dst_size: usize,
        length: *mut usize,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnMilestoneGet(
        txnp: TSHttpTxn,
        milestone: TSMilestonesType,
        time: *mut TSHRTime,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnIsCacheable(
        txnp: TSHttpTxn,
        request: TSMBuffer,
        response: TSMBuffer,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpServerStateNameLookup(state: TSServerState) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSHttpHookNameLookup(hook: TSHttpHookID) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSHttpEventNameLookup(event: TSEvent) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSUuidCreate() -> TSUuid;
}
extern "C" {
    pub fn TSUuidInitialize(uuid: TSUuid, v: TSUuidVersion) -> TSReturnCode;
}
extern "C" {
    pub fn TSUuidDestroy(uuid: TSUuid);
}
extern "C" {
    pub fn TSUuidCopy(dest: TSUuid, src: TSUuid) -> TSReturnCode;
}
extern "C" {
    pub fn TSUuidStringGet(uuid: TSUuid) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSUuidVersionGet(uuid: TSUuid) -> TSUuidVersion;
}
extern "C" {
    pub fn TSUuidStringParse(uuid: TSUuid, uuid_str: *const ::std::os::raw::c_char)
        -> TSReturnCode;
}
extern "C" {
    pub fn TSClientRequestUuidGet(
        txnp: TSHttpTxn,
        uuid_str: *mut ::std::os::raw::c_char,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSProcessUuidGet() -> TSUuid;
}
extern "C" {
    pub fn TSHttpTxnPluginTagGet(txnp: TSHttpTxn) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSHttpTxnClientProtocolStackGet(
        txnp: TSHttpTxn,
        n: ::std::os::raw::c_int,
        result: *mut *const ::std::os::raw::c_char,
        actual: *mut ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpSsnClientProtocolStackGet(
        ssnp: TSHttpSsn,
        n: ::std::os::raw::c_int,
        result: *mut *const ::std::os::raw::c_char,
        actual: *mut ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnClientProtocolStackContains(
        txnp: TSHttpTxn,
        tag: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSHttpSsnClientProtocolStackContains(
        ssnp: TSHttpSsn,
        tag: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSNormalizedProtocolTag(
        tag: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSRegisterProtocolTag(
        tag: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
pub const TSFetchEventExt_TS_FETCH_EVENT_EXT_HEAD_READY: TSFetchEventExt = -1;
pub const TSFetchEventExt_TS_FETCH_EVENT_EXT_HEAD_DONE: TSFetchEventExt = -2;
pub const TSFetchEventExt_TS_FETCH_EVENT_EXT_BODY_READY: TSFetchEventExt = -3;
pub const TSFetchEventExt_TS_FETCH_EVENT_EXT_BODY_DONE: TSFetchEventExt = -4;
pub type TSFetchEventExt = i32;
pub const TSFetchFlags_TS_FETCH_FLAGS_NONE: TSFetchFlags = 0;
pub const TSFetchFlags_TS_FETCH_FLAGS_STREAM: TSFetchFlags = 2;
pub const TSFetchFlags_TS_FETCH_FLAGS_DECHUNK: TSFetchFlags = 4;
pub const TSFetchFlags_TS_FETCH_FLAGS_NEWLOCK: TSFetchFlags = 8;
pub const TSFetchFlags_TS_FETCH_FLAGS_NOT_INTERNAL_REQUEST: TSFetchFlags = 16;
pub type TSFetchFlags = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_fetchsm {
    _unused: [u8; 0],
}
pub type TSFetchSM = *mut tsapi_fetchsm;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    _unused: [u8; 0],
}
extern "C" {
    pub fn TSCacheBufferInfoGet(
        txnp: TSCacheTxn,
        length: *mut u64,
        offset: *mut u64,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSCacheHttpInfoCreate() -> TSCacheHttpInfo;
}
extern "C" {
    pub fn TSCacheHttpInfoReqGet(infop: TSCacheHttpInfo, bufp: *mut TSMBuffer, obj: *mut TSMLoc);
}
extern "C" {
    pub fn TSCacheHttpInfoRespGet(infop: TSCacheHttpInfo, bufp: *mut TSMBuffer, obj: *mut TSMLoc);
}
extern "C" {
    pub fn TSCacheHttpInfoReqSet(infop: TSCacheHttpInfo, bufp: TSMBuffer, obj: TSMLoc);
}
extern "C" {
    pub fn TSCacheHttpInfoRespSet(infop: TSCacheHttpInfo, bufp: TSMBuffer, obj: TSMLoc);
}
extern "C" {
    pub fn TSCacheHttpInfoKeySet(infop: TSCacheHttpInfo, key: TSCacheKey);
}
extern "C" {
    pub fn TSCacheHttpInfoSizeSet(infop: TSCacheHttpInfo, size: i64);
}
extern "C" {
    pub fn TSCacheHttpInfoVector(
        infop: TSCacheHttpInfo,
        data: *mut ::std::os::raw::c_void,
        length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSCacheHttpInfoReqSentTimeGet(infop: TSCacheHttpInfo) -> time_t;
}
extern "C" {
    pub fn TSCacheHttpInfoRespReceivedTimeGet(infop: TSCacheHttpInfo) -> time_t;
}
extern "C" {
    pub fn TSCacheHttpInfoSizeGet(infop: TSCacheHttpInfo) -> i64;
}
extern "C" {
    pub fn TSMimeHdrFieldEqual(
        bufp: TSMBuffer,
        hdr_obj: TSMLoc,
        field1: TSMLoc,
        field2: TSMLoc,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpTxnHookRegisteredFor(
        txnp: TSHttpTxn,
        id: TSHttpHookID,
        funcp: TSEventFunc,
    ) -> TSReturnCode;
}
pub const TSHttpCntlType_TS_HTTP_CNTL_GET_LOGGING_MODE: TSHttpCntlType = 0;
pub const TSHttpCntlType_TS_HTTP_CNTL_SET_LOGGING_MODE: TSHttpCntlType = 1;
pub const TSHttpCntlType_TS_HTTP_CNTL_GET_INTERCEPT_RETRY_MODE: TSHttpCntlType = 2;
pub const TSHttpCntlType_TS_HTTP_CNTL_SET_INTERCEPT_RETRY_MODE: TSHttpCntlType = 3;
pub type TSHttpCntlType = u32;
extern "C" {
    pub fn TSHttpTxnCntl(
        txnp: TSHttpTxn,
        cntl: TSHttpCntlType,
        data: *mut ::std::os::raw::c_void,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSVConnCacheHttpInfoSet(connp: TSVConn, infop: TSCacheHttpInfo);
}
extern "C" {
    pub fn TSCacheDataTypeReady(
        type_: TSCacheDataType,
        is_ready: *mut ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnClientKeepaliveSet(txnp: TSHttpTxn, set: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TSHttpTxnServerRequestBodySet(
        txnp: TSHttpTxn,
        buf: *mut ::std::os::raw::c_char,
        buflength: i64,
    );
}
extern "C" {
    pub fn TSHttpTxnCachedRespTimeGet(txnp: TSHttpTxn, resp_time: *mut time_t) -> TSReturnCode;
}
extern "C" {
    pub fn TSCacheKeyDataTypeSet(key: TSCacheKey, type_: TSCacheDataType) -> TSReturnCode;
}
extern "C" {
    pub fn TSrandom() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn TSdrandom() -> f64;
}
extern "C" {
    pub fn TShrtime() -> TSHRTime;
}
extern "C" {
    pub fn TSCacheHttpInfoCopy(infop: TSCacheHttpInfo) -> TSCacheHttpInfo;
}
extern "C" {
    pub fn TSCacheHttpInfoDestroy(infop: TSCacheHttpInfo);
}
extern "C" {
    pub fn TSHttpTxnInfoIntGet(
        txnp: TSHttpTxn,
        key: TSHttpTxnInfoKey,
        value: *mut TSMgmtInt,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnCacheLookupCountGet(
        txnp: TSHttpTxn,
        lookup_count: *mut ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnRedirectRequest(
        txnp: TSHttpTxn,
        bufp: TSMBuffer,
        url_loc: TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnServerRespIgnore(txnp: TSHttpTxn) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnShutDown(txnp: TSHttpTxn, event: TSEvent) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnCloseAfterResponse(
        txnp: TSHttpTxn,
        should_close: ::std::os::raw::c_int,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnNewCacheLookupDo(
        txnp: TSHttpTxn,
        bufp: TSMBuffer,
        url_loc: TSMLoc,
    ) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnSecondUrlTryLock(txnp: TSHttpTxn) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnClientReqIsServerStyle(txnp: TSHttpTxn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpTxnOverwriteExpireTime(txnp: TSHttpTxn, expire_time: time_t);
}
extern "C" {
    pub fn TSHttpTxnUpdateCachedObject(txnp: TSHttpTxn) -> TSReturnCode;
}
extern "C" {
    pub fn TSHttpTxnLookingUpTypeGet(txnp: TSHttpTxn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSHttpTxnServerPush(
        txnp: TSHttpTxn,
        url: *const ::std::os::raw::c_char,
        url_len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TSPluginDescriptorAccept(contp: TSCont) -> TSReturnCode;
}
extern "C" {
    pub fn TSNetConnectTransparent(
        contp: TSCont,
        from: *const sockaddr,
        to: *const sockaddr,
    ) -> TSAction;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsapi_matcheline {
    _unused: [u8; 0],
}
pub type TSMatcherLine = *mut tsapi_matcheline;
extern "C" {
    pub fn TSMatcherReadIntoBuffer(
        file_name: *mut ::std::os::raw::c_char,
        file_len: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSMatcherTokLine(
        buffer: *mut ::std::os::raw::c_char,
        last: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSMatcherExtractIPRange(
        match_str: *mut ::std::os::raw::c_char,
        addr1: *mut u32,
        addr2: *mut u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSMatcherLineCreate() -> TSMatcherLine;
}
extern "C" {
    pub fn TSMatcherLineDestroy(ml: TSMatcherLine);
}
extern "C" {
    pub fn TSMatcherParseSrcIPConfigLine(
        line: *mut ::std::os::raw::c_char,
        ml: TSMatcherLine,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSMatcherLineName(
        ml: TSMatcherLine,
        element: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSMatcherLineValue(
        ml: TSMatcherLine,
        element: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TSMgmtConfigIntSet(
        var_name: *const ::std::os::raw::c_char,
        value: TSMgmtInt,
    ) -> TSReturnCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSClusterRPCHandle {
    pub opaque: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout_TSClusterRPCHandle() {
    assert_eq!(
        ::std::mem::size_of::<TSClusterRPCHandle>(),
        8usize,
        concat!("Size of: ", stringify!(TSClusterRPCHandle))
    );
    assert_eq!(
        ::std::mem::align_of::<TSClusterRPCHandle>(),
        4usize,
        concat!("Alignment of ", stringify!(TSClusterRPCHandle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSClusterRPCHandle>())).opaque as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSClusterRPCHandle),
            "::",
            stringify!(opaque)
        )
    );
}
pub type TSClusterRPCHandle_t = TSClusterRPCHandle;
pub type TSClusterStatusHandle_t = ::std::os::raw::c_int;
pub type TSNodeHandle_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSClusterRPCMsg {
    pub m_handle: TSClusterRPCHandle_t,
    pub m_data: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_TSClusterRPCMsg() {
    assert_eq!(
        ::std::mem::size_of::<TSClusterRPCMsg>(),
        12usize,
        concat!("Size of: ", stringify!(TSClusterRPCMsg))
    );
    assert_eq!(
        ::std::mem::align_of::<TSClusterRPCMsg>(),
        4usize,
        concat!("Alignment of ", stringify!(TSClusterRPCMsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSClusterRPCMsg>())).m_handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSClusterRPCMsg),
            "::",
            stringify!(m_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TSClusterRPCMsg>())).m_data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSClusterRPCMsg),
            "::",
            stringify!(m_data)
        )
    );
}
pub type TSClusterRPCMsg_t = TSClusterRPCMsg;
pub const TSNodeStatus_t_NODE_ONLINE: TSNodeStatus_t = 1;
pub const TSNodeStatus_t_NODE_OFFLINE: TSNodeStatus_t = 2;
pub type TSNodeStatus_t = u32;
pub const TSClusterRPCKey_t_RPC_API_WIRELESS_F01: TSClusterRPCKey_t = 51;
pub const TSClusterRPCKey_t_RPC_API_WIRELESS_F02: TSClusterRPCKey_t = 52;
pub const TSClusterRPCKey_t_RPC_API_WIRELESS_F03: TSClusterRPCKey_t = 53;
pub const TSClusterRPCKey_t_RPC_API_WIRELESS_F04: TSClusterRPCKey_t = 54;
pub const TSClusterRPCKey_t_RPC_API_WIRELESS_F05: TSClusterRPCKey_t = 55;
pub const TSClusterRPCKey_t_RPC_API_WIRELESS_F06: TSClusterRPCKey_t = 56;
pub const TSClusterRPCKey_t_RPC_API_WIRELESS_F07: TSClusterRPCKey_t = 57;
pub const TSClusterRPCKey_t_RPC_API_WIRELESS_F08: TSClusterRPCKey_t = 58;
pub const TSClusterRPCKey_t_RPC_API_WIRELESS_F09: TSClusterRPCKey_t = 59;
pub const TSClusterRPCKey_t_RPC_API_WIRELESS_F10: TSClusterRPCKey_t = 60;
pub type TSClusterRPCKey_t = u32;
pub type TSClusterRPCFunction = ::std::option::Option<
    unsafe extern "C" fn(
        node: *mut TSNodeHandle_t,
        msg: *mut TSClusterRPCMsg_t,
        msg_data_len: ::std::os::raw::c_int,
    ),
>;
pub type TSClusterStatusFunction =
    ::std::option::Option<unsafe extern "C" fn(node: *mut TSNodeHandle_t, s: TSNodeStatus_t)>;
extern "C" {
    pub fn TSAddClusterStatusFunction(
        Status_Function: TSClusterStatusFunction,
        m: TSMutex,
        h: *mut TSClusterStatusHandle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSDeleteClusterStatusFunction(h: *mut TSClusterStatusHandle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSNodeHandleToIPAddr(h: *mut TSNodeHandle_t, in_: *mut in_addr)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSGetMyNodeHandle(h: *mut TSNodeHandle_t);
}
extern "C" {
    pub fn TSEnableClusterStatusCallout(h: *mut TSClusterStatusHandle_t);
}
extern "C" {
    pub fn TSAddClusterRPCFunction(
        k: TSClusterRPCKey_t,
        RPC_Function: TSClusterRPCFunction,
        h: *mut TSClusterRPCHandle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSDeleteClusterRPCFunction(h: *mut TSClusterRPCHandle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSFreeRPCMsg(msg: *mut TSClusterRPCMsg_t, msg_data_len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TSAllocClusterRPCMsg(
        h: *mut TSClusterRPCHandle_t,
        data_size: ::std::os::raw::c_int,
    ) -> *mut TSClusterRPCMsg_t;
}
extern "C" {
    pub fn TSSendClusterRPC(
        nh: *mut TSNodeHandle_t,
        msg: *mut TSClusterRPCMsg_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TSFetchCreate(
        contp: TSCont,
        method: *const ::std::os::raw::c_char,
        url: *const ::std::os::raw::c_char,
        version: *const ::std::os::raw::c_char,
        client_addr: *const sockaddr,
        flags: ::std::os::raw::c_int,
    ) -> TSFetchSM;
}
extern "C" {
    pub fn TSFetchHeaderAdd(
        fetch_sm: TSFetchSM,
        name: *const ::std::os::raw::c_char,
        name_len: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
        value_len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TSFetchWriteData(fetch_sm: TSFetchSM, data: *const ::std::os::raw::c_void, len: usize);
}
extern "C" {
    pub fn TSFetchReadData(
        fetch_sm: TSFetchSM,
        buf: *mut ::std::os::raw::c_void,
        len: usize,
    ) -> isize;
}
extern "C" {
    pub fn TSFetchLaunch(fetch_sm: TSFetchSM);
}
extern "C" {
    pub fn TSFetchDestroy(fetch_sm: TSFetchSM);
}
extern "C" {
    pub fn TSFetchUserDataSet(fetch_sm: TSFetchSM, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn TSFetchUserDataGet(fetch_sm: TSFetchSM) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TSFetchRespHdrMBufGet(fetch_sm: TSFetchSM) -> TSMBuffer;
}
extern "C" {
    pub fn TSFetchRespHdrMLocGet(fetch_sm: TSFetchSM) -> TSMLoc;
}
